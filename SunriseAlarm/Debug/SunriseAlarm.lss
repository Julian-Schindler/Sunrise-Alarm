
SunriseAlarm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00001314  000013a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001314  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  008001da  008001da  00001482  2**0
                  ALLOC
  3 .stab         00000954  00000000  00000000  00001484  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000016e  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  00001f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000485  00000000  00000000  00001f86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000014b4  00000000  00000000  0000240b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000553  00000000  00000000  000038bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001a2b  00000000  00000000  00003e12  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003d0  00000000  00000000  00005840  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005cc  00000000  00000000  00005c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a5f  00000000  00000000  000061dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000070  00000000  00000000  00006c3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 cd 07 	jmp	0xf9a	; 0xf9a <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 d9 05 	jmp	0xbb2	; 0xbb2 <__vector_4>
      14:	0c 94 5d 05 	jmp	0xaba	; 0xaba <__vector_5>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e1       	ldi	r30, 0x14	; 20
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	aa 3d       	cpi	r26, 0xDA	; 218
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	11 e0       	ldi	r17, 0x01	; 1
      8c:	aa ed       	ldi	r26, 0xDA	; 218
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a2 3f       	cpi	r26, 0xF2	; 242
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <main>
      9e:	0c 94 88 09 	jmp	0x1310	; 0x1310 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 2b 05 	jmp	0xa56	; 0xa56 <__vector_default>

000000a6 <lcd_enable>:
 
////////////////////////////////////////////////////////////////////////////////
// Erzeugt einen Enable-Puls
static void lcd_enable( void )
{
    LCD_PORT |= (1<<LCD_EN);     // Enable auf 1 setzen
      a6:	2d 9a       	sbi	0x05, 5	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      a8:	85 e3       	ldi	r24, 0x35	; 53
      aa:	8a 95       	dec	r24
      ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_enable+0x4>
      ae:	00 00       	nop
    _delay_us( LCD_ENABLE_US );  // kurze Pause
    LCD_PORT &= ~(1<<LCD_EN);    // Enable auf 0 setzen
      b0:	2d 98       	cbi	0x05, 5	; 5
}
      b2:	08 95       	ret

000000b4 <lcd_out>:
// Sendet eine 4-bit Ausgabeoperation an das LCD
static void lcd_out( uint8_t data )
{
    data &= 0xF0;                       // obere 4 Bit maskieren
 
    LCD_PORT &= ~(0xF0>>(4-LCD_DB));    // Maske löschen
      b4:	95 b1       	in	r25, 0x05	; 5
      b6:	91 7e       	andi	r25, 0xE1	; 225
      b8:	95 b9       	out	0x05, r25	; 5
    LCD_PORT |= (data>>(4-LCD_DB));     // Bits setzen
      ba:	95 b1       	in	r25, 0x05	; 5
 
////////////////////////////////////////////////////////////////////////////////
// Sendet eine 4-bit Ausgabeoperation an das LCD
static void lcd_out( uint8_t data )
{
    data &= 0xF0;                       // obere 4 Bit maskieren
      bc:	80 7f       	andi	r24, 0xF0	; 240
 
    LCD_PORT &= ~(0xF0>>(4-LCD_DB));    // Maske löschen
    LCD_PORT |= (data>>(4-LCD_DB));     // Bits setzen
      be:	86 95       	lsr	r24
      c0:	86 95       	lsr	r24
      c2:	86 95       	lsr	r24
      c4:	98 2b       	or	r25, r24
      c6:	95 b9       	out	0x05, r25	; 5
    lcd_enable();
      c8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
}
      cc:	08 95       	ret

000000ce <lcd_data>:
}
  
////////////////////////////////////////////////////////////////////////////////
// Sendet ein Datenbyte an das LCD
void lcd_data( uint8_t data )
{
      ce:	1f 93       	push	r17
      d0:	18 2f       	mov	r17, r24
    LCD_PORT |= (1<<LCD_RS);    // RS auf 1 setzen
      d2:	28 9a       	sbi	0x05, 0	; 5
 
    lcd_out( data );            // zuerst die oberen, 
      d4:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_out>
    lcd_out( data<<4 );         // dann die unteren 4 Bit senden
      d8:	81 2f       	mov	r24, r17
      da:	82 95       	swap	r24
      dc:	80 7f       	andi	r24, 0xF0	; 240
      de:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_out>
      e2:	8a e7       	ldi	r24, 0x7A	; 122
      e4:	8a 95       	dec	r24
      e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_data+0x16>
      e8:	00 c0       	rjmp	.+0      	; 0xea <lcd_data+0x1c>
 
    _delay_us( LCD_WRITEDATA_US );
}
      ea:	1f 91       	pop	r17
      ec:	08 95       	ret

000000ee <lcd_command>:
 
////////////////////////////////////////////////////////////////////////////////
// Sendet einen Befehl an das LCD
void lcd_command( uint8_t data )
{
      ee:	1f 93       	push	r17
      f0:	18 2f       	mov	r17, r24
    LCD_PORT &= ~(1<<LCD_RS);    // RS auf 0 setzen
      f2:	28 98       	cbi	0x05, 0	; 5
 
    lcd_out( data );             // zuerst die oberen, 
      f4:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_out>
    lcd_out( data<<4 );           // dann die unteren 4 Bit senden
      f8:	81 2f       	mov	r24, r17
      fa:	82 95       	swap	r24
      fc:	80 7f       	andi	r24, 0xF0	; 240
      fe:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_out>
     102:	80 e7       	ldi	r24, 0x70	; 112
     104:	8a 95       	dec	r24
     106:	f1 f7       	brne	.-4      	; 0x104 <lcd_command+0x16>
 
    _delay_us( LCD_COMMAND_US );
}
     108:	1f 91       	pop	r17
     10a:	08 95       	ret

0000010c <lcd_clear>:
 
////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl zur Löschung des Displays
void lcd_clear( void )
{
    lcd_command( LCD_CLEAR_DISPLAY );
     10c:	81 e0       	ldi	r24, 0x01	; 1
     10e:	0e 94 77 00 	call	0xee	; 0xee <lcd_command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     112:	8f e9       	ldi	r24, 0x9F	; 159
     114:	9f e0       	ldi	r25, 0x0F	; 15
     116:	01 97       	sbiw	r24, 0x01	; 1
     118:	f1 f7       	brne	.-4      	; 0x116 <lcd_clear+0xa>
     11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_clear+0x10>
     11c:	00 00       	nop
    _delay_ms( LCD_CLEAR_DISPLAY_MS );
}
     11e:	08 95       	ret

00000120 <lcd_init>:
{
    // verwendete Pins auf Ausgang schalten
    uint8_t pins = (0x0F << LCD_DB) |           // 4 Datenleitungen
                   (1<<LCD_RS) |                // R/S Leitung
                   (1<<LCD_EN);                 // Enable Leitung
    LCD_DDR |= pins;
     120:	84 b1       	in	r24, 0x04	; 4
     122:	8f 63       	ori	r24, 0x3F	; 63
     124:	84 b9       	out	0x04, r24	; 4
 
    // initial alle Ausgänge auf Null
    LCD_PORT &= ~pins;
     126:	85 b1       	in	r24, 0x05	; 5
     128:	80 7c       	andi	r24, 0xC0	; 192
     12a:	85 b9       	out	0x05, r24	; 5
     12c:	8f e2       	ldi	r24, 0x2F	; 47
     12e:	95 e7       	ldi	r25, 0x75	; 117
     130:	01 97       	sbiw	r24, 0x01	; 1
     132:	f1 f7       	brne	.-4      	; 0x130 <lcd_init+0x10>
     134:	00 c0       	rjmp	.+0      	; 0x136 <lcd_init+0x16>
     136:	00 00       	nop
 
    // warten auf die Bereitschaft des LCD
    _delay_ms( LCD_BOOTUP_MS );
    
    // Soft-Reset muss 3mal hintereinander gesendet werden zur Initialisierung
    lcd_out( LCD_SOFT_RESET );
     138:	80 e3       	ldi	r24, 0x30	; 48
     13a:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_out>
     13e:	8f e0       	ldi	r24, 0x0F	; 15
     140:	97 e2       	ldi	r25, 0x27	; 39
     142:	01 97       	sbiw	r24, 0x01	; 1
     144:	f1 f7       	brne	.-4      	; 0x142 <lcd_init+0x22>
     146:	00 c0       	rjmp	.+0      	; 0x148 <lcd_init+0x28>
     148:	00 00       	nop
    _delay_ms( LCD_SOFT_RESET_MS1 );
 
    lcd_enable();
     14a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
     14e:	8f ec       	ldi	r24, 0xCF	; 207
     150:	97 e0       	ldi	r25, 0x07	; 7
     152:	01 97       	sbiw	r24, 0x01	; 1
     154:	f1 f7       	brne	.-4      	; 0x152 <lcd_init+0x32>
     156:	00 c0       	rjmp	.+0      	; 0x158 <lcd_init+0x38>
     158:	00 00       	nop
    _delay_ms( LCD_SOFT_RESET_MS2 );
 
    lcd_enable();
     15a:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_enable>
     15e:	8f ec       	ldi	r24, 0xCF	; 207
     160:	97 e0       	ldi	r25, 0x07	; 7
     162:	01 97       	sbiw	r24, 0x01	; 1
     164:	f1 f7       	brne	.-4      	; 0x162 <lcd_init+0x42>
     166:	00 c0       	rjmp	.+0      	; 0x168 <lcd_init+0x48>
     168:	00 00       	nop
    _delay_ms( LCD_SOFT_RESET_MS3 );
 
    // 4-bit Modus aktivieren 
    lcd_out( LCD_SET_FUNCTION |
     16a:	80 e2       	ldi	r24, 0x20	; 32
     16c:	0e 94 5a 00 	call	0xb4	; 0xb4 <lcd_out>
     170:	8f e0       	ldi	r24, 0x0F	; 15
     172:	97 e2       	ldi	r25, 0x27	; 39
     174:	01 97       	sbiw	r24, 0x01	; 1
     176:	f1 f7       	brne	.-4      	; 0x174 <lcd_init+0x54>
     178:	00 c0       	rjmp	.+0      	; 0x17a <lcd_init+0x5a>
     17a:	00 00       	nop
             LCD_FUNCTION_4BIT );
    _delay_ms( LCD_SET_4BITMODE_MS );
 
    // 4-bit Modus / 2 Zeilen / 5x7
    lcd_command( LCD_SET_FUNCTION |
     17c:	88 e2       	ldi	r24, 0x28	; 40
     17e:	0e 94 77 00 	call	0xee	; 0xee <lcd_command>
                 LCD_FUNCTION_4BIT |
                 LCD_FUNCTION_2LINE |
                 LCD_FUNCTION_5X7 );
 
    // Display ein / Cursor aus / Blinken aus
    lcd_command( LCD_SET_DISPLAY |
     182:	8c e0       	ldi	r24, 0x0C	; 12
     184:	0e 94 77 00 	call	0xee	; 0xee <lcd_command>
                 LCD_DISPLAY_ON |
                 LCD_CURSOR_OFF |
                 LCD_BLINKING_OFF); 
 
    // Cursor inkrement / kein Scrollen
    lcd_command( LCD_SET_ENTRY |
     188:	86 e0       	ldi	r24, 0x06	; 6
     18a:	0e 94 77 00 	call	0xee	; 0xee <lcd_command>
                 LCD_ENTRY_INCREASE |
                 LCD_ENTRY_NOSHIFT );
 
    lcd_clear();
     18e:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_clear>
}
     192:	08 95       	ret

00000194 <lcd_home>:
 
////////////////////////////////////////////////////////////////////////////////
// Sendet den Befehl: Cursor Home
void lcd_home( void )
{
    lcd_command( LCD_CURSOR_HOME );
     194:	82 e0       	ldi	r24, 0x02	; 2
     196:	0e 94 77 00 	call	0xee	; 0xee <lcd_command>
     19a:	8f e9       	ldi	r24, 0x9F	; 159
     19c:	9f e0       	ldi	r25, 0x0F	; 15
     19e:	01 97       	sbiw	r24, 0x01	; 1
     1a0:	f1 f7       	brne	.-4      	; 0x19e <lcd_home+0xa>
     1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <lcd_home+0x10>
     1a4:	00 00       	nop
    _delay_ms( LCD_CURSOR_HOME_MS );
}
     1a6:	08 95       	ret

000001a8 <lcd_setcursor>:
 
void lcd_setcursor( uint8_t x, uint8_t y )
{
    uint8_t data;
 
    switch (y)
     1a8:	62 30       	cpi	r22, 0x02	; 2
     1aa:	61 f0       	breq	.+24     	; 0x1c4 <lcd_setcursor+0x1c>
     1ac:	63 30       	cpi	r22, 0x03	; 3
     1ae:	18 f4       	brcc	.+6      	; 0x1b6 <lcd_setcursor+0xe>
     1b0:	61 30       	cpi	r22, 0x01	; 1
     1b2:	79 f4       	brne	.+30     	; 0x1d2 <lcd_setcursor+0x2a>
     1b4:	05 c0       	rjmp	.+10     	; 0x1c0 <lcd_setcursor+0x18>
     1b6:	63 30       	cpi	r22, 0x03	; 3
     1b8:	39 f0       	breq	.+14     	; 0x1c8 <lcd_setcursor+0x20>
     1ba:	64 30       	cpi	r22, 0x04	; 4
     1bc:	51 f4       	brne	.+20     	; 0x1d2 <lcd_setcursor+0x2a>
     1be:	06 c0       	rjmp	.+12     	; 0x1cc <lcd_setcursor+0x24>
    {
        case 1:    // 1. Zeile
            data = LCD_SET_DDADR + LCD_DDADR_LINE1 + x;
     1c0:	80 58       	subi	r24, 0x80	; 128
            break;
     1c2:	05 c0       	rjmp	.+10     	; 0x1ce <lcd_setcursor+0x26>
 
        case 2:    // 2. Zeile
            data = LCD_SET_DDADR + LCD_DDADR_LINE2 + x;
     1c4:	80 54       	subi	r24, 0x40	; 64
            break;
     1c6:	03 c0       	rjmp	.+6      	; 0x1ce <lcd_setcursor+0x26>
 
        case 3:    // 3. Zeile
            data = LCD_SET_DDADR + LCD_DDADR_LINE3 + x;
     1c8:	80 57       	subi	r24, 0x70	; 112
            break;
     1ca:	01 c0       	rjmp	.+2      	; 0x1ce <lcd_setcursor+0x26>
 
        case 4:    // 4. Zeile
            data = LCD_SET_DDADR + LCD_DDADR_LINE4 + x;
     1cc:	80 53       	subi	r24, 0x30	; 48
 
        default:
            return;                                   // für den Fall einer falschen Zeile
    }
 
    lcd_command( data );
     1ce:	0e 94 77 00 	call	0xee	; 0xee <lcd_command>
     1d2:	08 95       	ret

000001d4 <lcd_string>:
 
////////////////////////////////////////////////////////////////////////////////
// Schreibt einen String auf das LCD
 
void lcd_string( const char *data )
{
     1d4:	0f 93       	push	r16
     1d6:	1f 93       	push	r17
     1d8:	cf 93       	push	r28
     1da:	df 93       	push	r29
     1dc:	8c 01       	movw	r16, r24
//     while( *data != '\0' )
//         lcd_data( *data++ );

unsigned char c =0;

    while( *data != '\0' )
     1de:	fc 01       	movw	r30, r24
     1e0:	80 81       	ld	r24, Z
     1e2:	88 23       	and	r24, r24
     1e4:	51 f4       	brne	.+20     	; 0x1fa <lcd_string+0x26>
     1e6:	10 c0       	rjmp	.+32     	; 0x208 <lcd_string+0x34>
	{
		if(c==16)
     1e8:	9e 01       	movw	r18, r28
     1ea:	20 1b       	sub	r18, r16
     1ec:	20 31       	cpi	r18, 0x10	; 16
     1ee:	31 f4       	brne	.+12     	; 0x1fc <lcd_string+0x28>
			lcd_setcursor(0,2);
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	62 e0       	ldi	r22, 0x02	; 2
     1f4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_setcursor>
     1f8:	01 c0       	rjmp	.+2      	; 0x1fc <lcd_string+0x28>
//     while( *data != '\0' )
//         lcd_data( *data++ );

unsigned char c =0;

    while( *data != '\0' )
     1fa:	e8 01       	movw	r28, r16
	{
		if(c==16)
			lcd_setcursor(0,2);
			
        lcd_data( *data++ );
     1fc:	89 91       	ld	r24, Y+
     1fe:	0e 94 67 00 	call	0xce	; 0xce <lcd_data>
//     while( *data != '\0' )
//         lcd_data( *data++ );

unsigned char c =0;

    while( *data != '\0' )
     202:	88 81       	ld	r24, Y
     204:	88 23       	and	r24, r24
     206:	81 f7       	brne	.-32     	; 0x1e8 <lcd_string+0x14>
			lcd_setcursor(0,2);
			
        lcd_data( *data++ );
		c++;
	}		
}
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	1f 91       	pop	r17
     20e:	0f 91       	pop	r16
     210:	08 95       	ret

00000212 <lcd_int>:

void lcd_int( int number )
{
     212:	0f 93       	push	r16
     214:	1f 93       	push	r17
     216:	df 93       	push	r29
     218:	cf 93       	push	r28
     21a:	00 d0       	rcall	.+0      	; 0x21c <lcd_int+0xa>
     21c:	cd b7       	in	r28, 0x3d	; 61
     21e:	de b7       	in	r29, 0x3e	; 62
	char Buffer[2];
	itoa( number, Buffer,10); 
     220:	8e 01       	movw	r16, r28
     222:	0f 5f       	subi	r16, 0xFF	; 255
     224:	1f 4f       	sbci	r17, 0xFF	; 255
     226:	b8 01       	movw	r22, r16
     228:	4a e0       	ldi	r20, 0x0A	; 10
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	0e 94 43 09 	call	0x1286	; 0x1286 <itoa>
	lcd_string( Buffer );
     230:	c8 01       	movw	r24, r16
     232:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
}
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
     23a:	cf 91       	pop	r28
     23c:	df 91       	pop	r29
     23e:	1f 91       	pop	r17
     240:	0f 91       	pop	r16
     242:	08 95       	ret

00000244 <lcd_string_append>:


unsigned char g_string_count = 0;
void lcd_string_append(const char*data)
{
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	ec 01       	movw	r28, r24
    while( *data != '\0' )
     24a:	88 81       	ld	r24, Y
     24c:	88 23       	and	r24, r24
     24e:	99 f0       	breq	.+38     	; 0x276 <lcd_string_append+0x32>
	{
		if(g_string_count==8)
     250:	80 91 da 01 	lds	r24, 0x01DA
     254:	88 30       	cpi	r24, 0x08	; 8
     256:	21 f4       	brne	.+8      	; 0x260 <lcd_string_append+0x1c>
			lcd_setcursor(0,2);
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	62 e0       	ldi	r22, 0x02	; 2
     25c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_setcursor>
			
        lcd_data( *data++ );
     260:	89 91       	ld	r24, Y+
     262:	0e 94 67 00 	call	0xce	; 0xce <lcd_data>
		g_string_count++;
     266:	80 91 da 01 	lds	r24, 0x01DA
     26a:	8f 5f       	subi	r24, 0xFF	; 255
     26c:	80 93 da 01 	sts	0x01DA, r24


unsigned char g_string_count = 0;
void lcd_string_append(const char*data)
{
    while( *data != '\0' )
     270:	88 81       	ld	r24, Y
     272:	88 23       	and	r24, r24
     274:	69 f7       	brne	.-38     	; 0x250 <lcd_string_append+0xc>
			
        lcd_data( *data++ );
		g_string_count++;
	}
	
	if (g_string_count>16)
     276:	80 91 da 01 	lds	r24, 0x01DA
     27a:	81 31       	cpi	r24, 0x11	; 17
     27c:	10 f0       	brcs	.+4      	; 0x282 <lcd_string_append+0x3e>
		g_string_count = 0;
     27e:	10 92 da 01 	sts	0x01DA, r1
}
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <reset_g_string_count>:
void reset_g_string_count()
{
	g_string_count = 0;
     288:	10 92 da 01 	sts	0x01DA, r1
}	
     28c:	08 95       	ret

0000028e <lcd_generatechar>:
 
////////////////////////////////////////////////////////////////////////////////
// Schreibt ein Zeichen in den Character Generator RAM
 
void lcd_generatechar( uint8_t code, const uint8_t *data )
{
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	06 2f       	mov	r16, r22
     29c:	17 2f       	mov	r17, r23
    // Startposition des Zeichens einstellen
    lcd_command( LCD_SET_CGADR | (code<<3) );
     29e:	88 0f       	add	r24, r24
     2a0:	88 0f       	add	r24, r24
     2a2:	88 0f       	add	r24, r24
     2a4:	80 64       	ori	r24, 0x40	; 64
     2a6:	0e 94 77 00 	call	0xee	; 0xee <lcd_command>
     2aa:	e0 2e       	mov	r14, r16
     2ac:	e7 01       	movw	r28, r14
     2ae:	7e 01       	movw	r14, r28
     2b0:	f1 2e       	mov	r15, r17
     2b2:	e7 01       	movw	r28, r14
     2b4:	18 e0       	ldi	r17, 0x08	; 8
 
    // Bitmuster übertragen
    for ( uint8_t i=0; i<8; i++ )
    {
        lcd_data( data[i] );
     2b6:	89 91       	ld	r24, Y+
     2b8:	0e 94 67 00 	call	0xce	; 0xce <lcd_data>
     2bc:	11 50       	subi	r17, 0x01	; 1
{
    // Startposition des Zeichens einstellen
    lcd_command( LCD_SET_CGADR | (code<<3) );
 
    // Bitmuster übertragen
    for ( uint8_t i=0; i<8; i++ )
     2be:	d9 f7       	brne	.-10     	; 0x2b6 <lcd_generatechar+0x28>
    {
        lcd_data( data[i] );
    }
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	1f 91       	pop	r17
     2c6:	0f 91       	pop	r16
     2c8:	ff 90       	pop	r15
     2ca:	ef 90       	pop	r14
     2cc:	08 95       	ret

000002ce <alarm_on>:
/************************************************************************/
/*                                                                      */
/************************************************************************/
void alarm_on(void)
{
	isAlarm = 1;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	80 93 dd 01 	sts	0x01DD, r24
}
     2d4:	08 95       	ret

000002d6 <alarm_off>:
void alarm_off(void)
{
	SUMMER_OFF;
     2d6:	2f 98       	cbi	0x05, 7	; 5
	
	isAlarm = 0;
     2d8:	10 92 dd 01 	sts	0x01DD, r1
}
     2dc:	08 95       	ret

000002de <lcd_sendWeekday>:
/*                                                                      */
/************************************************************************/

void lcd_sendWeekday(uint8_t weekday)
{
	switch(weekday)
     2de:	84 30       	cpi	r24, 0x04	; 4
     2e0:	f9 f0       	breq	.+62     	; 0x320 <lcd_sendWeekday+0x42>
     2e2:	85 30       	cpi	r24, 0x05	; 5
     2e4:	38 f4       	brcc	.+14     	; 0x2f4 <lcd_sendWeekday+0x16>
     2e6:	82 30       	cpi	r24, 0x02	; 2
     2e8:	89 f0       	breq	.+34     	; 0x30c <lcd_sendWeekday+0x2e>
     2ea:	83 30       	cpi	r24, 0x03	; 3
     2ec:	a0 f4       	brcc	.+40     	; 0x316 <lcd_sendWeekday+0x38>
     2ee:	81 30       	cpi	r24, 0x01	; 1
     2f0:	59 f5       	brne	.+86     	; 0x348 <lcd_sendWeekday+0x6a>
     2f2:	07 c0       	rjmp	.+14     	; 0x302 <lcd_sendWeekday+0x24>
     2f4:	86 30       	cpi	r24, 0x06	; 6
     2f6:	f1 f0       	breq	.+60     	; 0x334 <lcd_sendWeekday+0x56>
     2f8:	86 30       	cpi	r24, 0x06	; 6
     2fa:	b8 f0       	brcs	.+46     	; 0x32a <lcd_sendWeekday+0x4c>
     2fc:	87 30       	cpi	r24, 0x07	; 7
     2fe:	21 f5       	brne	.+72     	; 0x348 <lcd_sendWeekday+0x6a>
     300:	1e c0       	rjmp	.+60     	; 0x33e <lcd_sendWeekday+0x60>
	{
		case 1:
			lcd_string("Mo");
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	91 e0       	ldi	r25, 0x01	; 1
     306:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		break;
     30a:	08 95       	ret
		case 2:
			lcd_string("Di");
     30c:	83 e0       	ldi	r24, 0x03	; 3
     30e:	91 e0       	ldi	r25, 0x01	; 1
     310:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		break;
     314:	08 95       	ret
		case 3:
			lcd_string("Mi");
     316:	86 e0       	ldi	r24, 0x06	; 6
     318:	91 e0       	ldi	r25, 0x01	; 1
     31a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		break;
     31e:	08 95       	ret
		case 4:
			lcd_string("Do");
     320:	89 e0       	ldi	r24, 0x09	; 9
     322:	91 e0       	ldi	r25, 0x01	; 1
     324:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		break;
     328:	08 95       	ret
		case 5:
			lcd_string("Fr");
     32a:	8c e0       	ldi	r24, 0x0C	; 12
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		break;
     332:	08 95       	ret
		case 6:
			lcd_string("Sa");
     334:	8f e0       	ldi	r24, 0x0F	; 15
     336:	91 e0       	ldi	r25, 0x01	; 1
     338:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		break;
     33c:	08 95       	ret
		case 7:
			lcd_string("So");
     33e:	82 e1       	ldi	r24, 0x12	; 18
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		break;
     346:	08 95       	ret
		default:
			lcd_string("er");
     348:	85 e1       	ldi	r24, 0x15	; 21
     34a:	91 e0       	ldi	r25, 0x01	; 1
     34c:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
     350:	08 95       	ret

00000352 <menu_setAlarm>:
	static uint8_t new_Alarm_Min = 0;
	static uint8_t new_Week = 0;
	
	static uint8_t state = 1;
	
	switch(state)
     352:	90 91 d4 01 	lds	r25, 0x01D4
     356:	92 30       	cpi	r25, 0x02	; 2
     358:	11 f1       	breq	.+68     	; 0x39e <menu_setAlarm+0x4c>
     35a:	93 30       	cpi	r25, 0x03	; 3
     35c:	e1 f1       	breq	.+120    	; 0x3d6 <menu_setAlarm+0x84>
     35e:	91 30       	cpi	r25, 0x01	; 1
     360:	09 f0       	breq	.+2      	; 0x364 <menu_setAlarm+0x12>
     362:	62 c0       	rjmp	.+196    	; 0x428 <menu_setAlarm+0xd6>
	{
		case STATE_SET_HOUR:
			if(action == ACT_ENCODER_RIGHT)
     364:	8b 30       	cpi	r24, 0x0B	; 11
     366:	31 f4       	brne	.+12     	; 0x374 <menu_setAlarm+0x22>
			{
				new_Alarm_Hour++;				
     368:	80 91 e0 01 	lds	r24, 0x01E0
     36c:	8f 5f       	subi	r24, 0xFF	; 255
     36e:	80 93 e0 01 	sts	0x01E0, r24
     372:	5a c0       	rjmp	.+180    	; 0x428 <menu_setAlarm+0xd6>
			}
			else if(action == ACT_ENCODER_LEFT)
     374:	8a 30       	cpi	r24, 0x0A	; 10
     376:	61 f4       	brne	.+24     	; 0x390 <menu_setAlarm+0x3e>
			{
				if(new_Alarm_Hour == 0)
     378:	80 91 e0 01 	lds	r24, 0x01E0
     37c:	88 23       	and	r24, r24
     37e:	21 f4       	brne	.+8      	; 0x388 <menu_setAlarm+0x36>
					new_Alarm_Hour = 23;
     380:	87 e1       	ldi	r24, 0x17	; 23
     382:	80 93 e0 01 	sts	0x01E0, r24
     386:	56 c0       	rjmp	.+172    	; 0x434 <menu_setAlarm+0xe2>
				else
					new_Alarm_Hour--;
     388:	81 50       	subi	r24, 0x01	; 1
     38a:	80 93 e0 01 	sts	0x01E0, r24
     38e:	4c c0       	rjmp	.+152    	; 0x428 <menu_setAlarm+0xd6>
			}
			else if(action == ACT_ENCODER_BUTTON)
     390:	8c 30       	cpi	r24, 0x0C	; 12
     392:	09 f0       	breq	.+2      	; 0x396 <menu_setAlarm+0x44>
     394:	49 c0       	rjmp	.+146    	; 0x428 <menu_setAlarm+0xd6>
			{
				state ++;				
     396:	9f 5f       	subi	r25, 0xFF	; 255
     398:	90 93 d4 01 	sts	0x01D4, r25
     39c:	45 c0       	rjmp	.+138    	; 0x428 <menu_setAlarm+0xd6>
			}
		break;
		case STATE_SET_MINUTE:
			if(action == ACT_ENCODER_RIGHT)
     39e:	8b 30       	cpi	r24, 0x0B	; 11
     3a0:	31 f4       	brne	.+12     	; 0x3ae <menu_setAlarm+0x5c>
			{
				new_Alarm_Min++;				
     3a2:	80 91 df 01 	lds	r24, 0x01DF
     3a6:	8f 5f       	subi	r24, 0xFF	; 255
     3a8:	80 93 df 01 	sts	0x01DF, r24
     3ac:	3d c0       	rjmp	.+122    	; 0x428 <menu_setAlarm+0xd6>
			}
			else if(action == ACT_ENCODER_LEFT)
     3ae:	8a 30       	cpi	r24, 0x0A	; 10
     3b0:	61 f4       	brne	.+24     	; 0x3ca <menu_setAlarm+0x78>
			{
				if(new_Alarm_Min == 0)
     3b2:	80 91 df 01 	lds	r24, 0x01DF
     3b6:	88 23       	and	r24, r24
     3b8:	21 f4       	brne	.+8      	; 0x3c2 <menu_setAlarm+0x70>
					new_Alarm_Min = 59;
     3ba:	8b e3       	ldi	r24, 0x3B	; 59
     3bc:	80 93 df 01 	sts	0x01DF, r24
     3c0:	33 c0       	rjmp	.+102    	; 0x428 <menu_setAlarm+0xd6>
				else
					new_Alarm_Min--;
     3c2:	81 50       	subi	r24, 0x01	; 1
     3c4:	80 93 df 01 	sts	0x01DF, r24
     3c8:	2f c0       	rjmp	.+94     	; 0x428 <menu_setAlarm+0xd6>
			}
			else if(action == ACT_ENCODER_BUTTON)
     3ca:	8c 30       	cpi	r24, 0x0C	; 12
     3cc:	69 f5       	brne	.+90     	; 0x428 <menu_setAlarm+0xd6>
			{
				state ++;				
     3ce:	9f 5f       	subi	r25, 0xFF	; 255
     3d0:	90 93 d4 01 	sts	0x01D4, r25
     3d4:	29 c0       	rjmp	.+82     	; 0x428 <menu_setAlarm+0xd6>
			}
		break;
		case STATE_SET_WEEKDAY:
			if(action == ACT_ENCODER_RIGHT)
     3d6:	8b 30       	cpi	r24, 0x0B	; 11
     3d8:	31 f4       	brne	.+12     	; 0x3e6 <menu_setAlarm+0x94>
				{
					new_Week++;				
     3da:	80 91 de 01 	lds	r24, 0x01DE
     3de:	8f 5f       	subi	r24, 0xFF	; 255
     3e0:	80 93 de 01 	sts	0x01DE, r24
     3e4:	21 c0       	rjmp	.+66     	; 0x428 <menu_setAlarm+0xd6>
				}
				else if(action == ACT_ENCODER_LEFT)
     3e6:	8a 30       	cpi	r24, 0x0A	; 10
     3e8:	31 f4       	brne	.+12     	; 0x3f6 <menu_setAlarm+0xa4>
				{
					new_Week--;
     3ea:	80 91 de 01 	lds	r24, 0x01DE
     3ee:	81 50       	subi	r24, 0x01	; 1
     3f0:	80 93 de 01 	sts	0x01DE, r24
     3f4:	19 c0       	rjmp	.+50     	; 0x428 <menu_setAlarm+0xd6>
				}
				else if(action == ACT_ENCODER_BUTTON)
     3f6:	8c 30       	cpi	r24, 0x0C	; 12
     3f8:	b9 f4       	brne	.+46     	; 0x428 <menu_setAlarm+0xd6>
				{
					state == STATE_INPUT_OVER;		
					current_screen = SCREEN_HOME;		
     3fa:	81 e0       	ldi	r24, 0x01	; 1
     3fc:	80 93 db 01 	sts	0x01DB, r24
					state = STATE_SET_HOUR;		
     400:	80 93 d4 01 	sts	0x01D4, r24
					
					//write alarm to alarm array
					alarms[0][0] = 1;
     404:	80 93 e8 01 	sts	0x01E8, r24
					alarms[0][1] = new_Alarm_Hour;
     408:	90 91 e0 01 	lds	r25, 0x01E0
     40c:	90 93 e9 01 	sts	0x01E9, r25
					alarms[0][2] = new_Alarm_Min; 
     410:	80 91 df 01 	lds	r24, 0x01DF
     414:	80 93 ea 01 	sts	0x01EA, r24
					alarms[0][3] = new_Alarm_Hour;
     418:	90 93 eb 01 	sts	0x01EB, r25
					alarms[0][4] = new_Alarm_Min+10;
     41c:	86 5f       	subi	r24, 0xF6	; 246
     41e:	80 93 ec 01 	sts	0x01EC, r24
					alarms[0][5] = 0xFF; //every day
     422:	8f ef       	ldi	r24, 0xFF	; 255
     424:	80 93 ed 01 	sts	0x01ED, r24
			//send new alarm time to RTC
			
		break;
	}	
	
	if(new_Alarm_Hour > 23)
     428:	80 91 e0 01 	lds	r24, 0x01E0
     42c:	88 31       	cpi	r24, 0x18	; 24
     42e:	10 f0       	brcs	.+4      	; 0x434 <menu_setAlarm+0xe2>
		new_Alarm_Hour = 0;
     430:	10 92 e0 01 	sts	0x01E0, r1
	if(new_Alarm_Min > 59)
     434:	80 91 df 01 	lds	r24, 0x01DF
     438:	8c 33       	cpi	r24, 0x3C	; 60
     43a:	10 f0       	brcs	.+4      	; 0x440 <menu_setAlarm+0xee>
		new_Alarm_Min = 0;
     43c:	10 92 df 01 	sts	0x01DF, r1
	if(new_Week > 3)
     440:	80 91 de 01 	lds	r24, 0x01DE
     444:	84 30       	cpi	r24, 0x04	; 4
     446:	18 f0       	brcs	.+6      	; 0x44e <menu_setAlarm+0xfc>
		new_Week = 1;
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	80 93 de 01 	sts	0x01DE, r24

				
	lcd_clear();
     44e:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_clear>
	lcd_string("set alarm  ");
     452:	88 e1       	ldi	r24, 0x18	; 24
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	if(new_Alarm_Hour<10)
     45a:	80 91 e0 01 	lds	r24, 0x01E0
     45e:	8a 30       	cpi	r24, 0x0A	; 10
     460:	20 f4       	brcc	.+8      	; 0x46a <menu_setAlarm+0x118>
		lcd_string("0");
     462:	84 e2       	ldi	r24, 0x24	; 36
     464:	91 e0       	ldi	r25, 0x01	; 1
     466:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	lcd_int(new_Alarm_Hour);
     46a:	80 91 e0 01 	lds	r24, 0x01E0
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 09 01 	call	0x212	; 0x212 <lcd_int>
	lcd_string(":");
     474:	86 e2       	ldi	r24, 0x26	; 38
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	if(new_Alarm_Min<10)
     47c:	80 91 df 01 	lds	r24, 0x01DF
     480:	8a 30       	cpi	r24, 0x0A	; 10
     482:	20 f4       	brcc	.+8      	; 0x48c <menu_setAlarm+0x13a>
		lcd_string("0");
     484:	84 e2       	ldi	r24, 0x24	; 36
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	lcd_int(new_Alarm_Min);
     48c:	80 91 df 01 	lds	r24, 0x01DF
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	0e 94 09 01 	call	0x212	; 0x212 <lcd_int>
	lcd_setcursor(0,2); //go to 2. line	
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	62 e0       	ldi	r22, 0x02	; 2
     49a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_setcursor>
	if(new_Week == 1)
     49e:	80 91 de 01 	lds	r24, 0x01DE
     4a2:	81 30       	cpi	r24, 0x01	; 1
     4a4:	29 f4       	brne	.+10     	; 0x4b0 <menu_setAlarm+0x15e>
	{
		lcd_string("Mo-Fr");
     4a6:	88 e2       	ldi	r24, 0x28	; 40
     4a8:	91 e0       	ldi	r25, 0x01	; 1
     4aa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
     4ae:	08 95       	ret
	}
	else if(new_Week ==2)
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	29 f4       	brne	.+10     	; 0x4be <menu_setAlarm+0x16c>
	{
		lcd_string("Sa-So");
     4b4:	8e e2       	ldi	r24, 0x2E	; 46
     4b6:	91 e0       	ldi	r25, 0x01	; 1
     4b8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
     4bc:	08 95       	ret
	}
	else
	{
		lcd_string("Mo-So");
     4be:	84 e3       	ldi	r24, 0x34	; 52
     4c0:	91 e0       	ldi	r25, 0x01	; 1
     4c2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
     4c6:	08 95       	ret

000004c8 <USARTInit>:
   
//initialize the USART
void USARTInit(uint16_t ubrr_value)
{
   //Set Baud rate
   UBRR0L = ubrr_value;
     4c8:	80 93 c4 00 	sts	0x00C4, r24
   UBRR0H = (ubrr_value>>8);
     4cc:	90 93 c5 00 	sts	0x00C5, r25
   >> Asynchronous mode
   >> No Parity
   >> 1 StopBit
   >> char size 8
   */
   UCSR0C=(1<<USBS0)|(3<<UCSZ00);
     4d0:	8e e0       	ldi	r24, 0x0E	; 14
     4d2:	80 93 c2 00 	sts	0x00C2, r24

   //Enable The receiver and transmitter
   UCSR0B=(1<<RXEN0)|(1<<TXEN0);
     4d6:	88 e1       	ldi	r24, 0x18	; 24
     4d8:	80 93 c1 00 	sts	0x00C1, r24
}
     4dc:	08 95       	ret

000004de <USARTReadChar>:
//gebe empfangenes Zeichen zurück (char)
//rx_data = USARTReadChar();
char USARTReadChar()
{
   //Wait untill a data is available
   while(!(UCSR0A & (1<<RXC0)))
     4de:	e0 ec       	ldi	r30, 0xC0	; 192
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	80 81       	ld	r24, Z
     4e4:	88 23       	and	r24, r24
     4e6:	ec f7       	brge	.-6      	; 0x4e2 <USARTReadChar+0x4>
   {	/*Do nothing*/   }

   //Now USART has got data from host
   return UDR0;
     4e8:	80 91 c6 00 	lds	r24, 0x00C6
}
     4ec:	08 95       	ret

000004ee <USARTWriteChar>:
//sende einzeknen char
void USARTWriteChar(char rx_data)
{
   //Wait untill the transmitter is ready

   while(!(UCSR0A & (1<<UDRE0)))
     4ee:	e0 ec       	ldi	r30, 0xC0	; 192
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	90 81       	ld	r25, Z
     4f4:	95 ff       	sbrs	r25, 5
     4f6:	fd cf       	rjmp	.-6      	; 0x4f2 <USARTWriteChar+0x4>
   {	/*Do nothing*/	}

   //Now write the data to USART buffer
   UDR0=rx_data;
     4f8:	80 93 c6 00 	sts	0x00C6, r24
}
     4fc:	08 95       	ret

000004fe <sende>:


// sende ein Array von Chars
// sende("hello world");
void sende (const char *s)
{
     4fe:	cf 93       	push	r28
     500:	df 93       	push	r29
     502:	ec 01       	movw	r28, r24
    do
    {
        USARTWriteChar(*s);
     504:	89 91       	ld	r24, Y+
     506:	0e 94 77 02 	call	0x4ee	; 0x4ee <USARTWriteChar>
		*s++;
    }
    while (*s);
     50a:	88 81       	ld	r24, Y
     50c:	88 23       	and	r24, r24
     50e:	d1 f7       	brne	.-12     	; 0x504 <sende+0x6>
}
     510:	df 91       	pop	r29
     512:	cf 91       	pop	r28
     514:	08 95       	ret

00000516 <sendeInt>:

//sende Int als char (ASCII)
void sendeInt(const int *i)
{
     516:	0f 93       	push	r16
     518:	1f 93       	push	r17
     51a:	df 93       	push	r29
     51c:	cf 93       	push	r28
     51e:	cd b7       	in	r28, 0x3d	; 61
     520:	de b7       	in	r29, 0x3e	; 62
     522:	64 97       	sbiw	r28, 0x14	; 20
     524:	0f b6       	in	r0, 0x3f	; 63
     526:	f8 94       	cli
     528:	de bf       	out	0x3e, r29	; 62
     52a:	0f be       	out	0x3f, r0	; 63
     52c:	cd bf       	out	0x3d, r28	; 61
	char Buffer[20]; // in diesem {} lokal
	itoa(i, Buffer, 10 ); 
     52e:	8e 01       	movw	r16, r28
     530:	0f 5f       	subi	r16, 0xFF	; 255
     532:	1f 4f       	sbci	r17, 0xFF	; 255
     534:	b8 01       	movw	r22, r16
     536:	4a e0       	ldi	r20, 0x0A	; 10
     538:	50 e0       	ldi	r21, 0x00	; 0
     53a:	0e 94 43 09 	call	0x1286	; 0x1286 <itoa>
	sende(Buffer);
     53e:	c8 01       	movw	r24, r16
     540:	0e 94 7f 02 	call	0x4fe	; 0x4fe <sende>
     544:	64 96       	adiw	r28, 0x14	; 20
     546:	0f b6       	in	r0, 0x3f	; 63
     548:	f8 94       	cli
     54a:	de bf       	out	0x3e, r29	; 62
     54c:	0f be       	out	0x3f, r0	; 63
     54e:	cd bf       	out	0x3d, r28	; 61
     550:	cf 91       	pop	r28
     552:	df 91       	pop	r29
     554:	1f 91       	pop	r17
     556:	0f 91       	pop	r16
     558:	08 95       	ret

0000055a <I2CInit>:

void I2CInit(void)
{
	//Set up TWI Module
		
	TWBR = 5;
     55a:	85 e0       	ldi	r24, 0x05	; 5
     55c:	80 93 b8 00 	sts	0x00B8, r24
	//TWBR = 32; //400KHz_SCL @8MHz_CPU
	TWSR &= (~((1<<TWPS1)|(1<<TWPS0)));//prescaler = 1
     560:	e9 eb       	ldi	r30, 0xB9	; 185
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	8c 7f       	andi	r24, 0xFC	; 252
     568:	80 83       	st	Z, r24

}
     56a:	08 95       	ret

0000056c <I2CWriteByte>:

uint8_t I2CWriteByte(uint8_t address,uint8_t data)
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     570:	ec eb       	ldi	r30, 0xBC	; 188
     572:	f0 e0       	ldi	r31, 0x00	; 0
     574:	94 ea       	ldi	r25, 0xA4	; 164

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
     576:	a9 eb       	ldi	r26, 0xB9	; 185
     578:	b0 e0       	ldi	r27, 0x00	; 0
			return FALSE;

		//Now write SLA+W
		//TWDR=0b10100000;	
		TWDR = address & 0b11111110; //clear LSB: write operation
     57a:	8e 7f       	andi	r24, 0xFE	; 254
     57c:	cb eb       	ldi	r28, 0xBB	; 187
     57e:	d0 e0       	ldi	r29, 0x00	; 0

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     580:	34 e8       	ldi	r19, 0x84	; 132
uint8_t I2CWriteByte(uint8_t address,uint8_t data)
{
do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     582:	90 83       	st	Z, r25

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     584:	20 81       	ld	r18, Z
     586:	22 23       	and	r18, r18
     588:	ec f7       	brge	.-6      	; 0x584 <I2CWriteByte+0x18>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     58a:	2c 91       	ld	r18, X
     58c:	28 7f       	andi	r18, 0xF8	; 248
     58e:	28 30       	cpi	r18, 0x08	; 8
     590:	41 f5       	brne	.+80     	; 0x5e2 <I2CWriteByte+0x76>
			return FALSE;

		//Now write SLA+W
		//TWDR=0b10100000;	
		TWDR = address & 0b11111110; //clear LSB: write operation
     592:	88 83       	st	Y, r24

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     594:	30 83       	st	Z, r19

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     596:	20 81       	ld	r18, Z
     598:	22 23       	and	r18, r18
     59a:	ec f7       	brge	.-6      	; 0x596 <I2CWriteByte+0x2a>
	
	}while((TWSR & 0xF8) != 0x18);
     59c:	2c 91       	ld	r18, X
     59e:	28 7f       	andi	r18, 0xF8	; 248
     5a0:	28 31       	cpi	r18, 0x18	; 24
     5a2:	79 f7       	brne	.-34     	; 0x582 <I2CWriteByte+0x16>
	
	//Now write DATA
	TWDR=(data);
     5a4:	60 93 bb 00 	sts	0x00BB, r22

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     5a8:	84 e8       	ldi	r24, 0x84	; 132
     5aa:	80 93 bc 00 	sts	0x00BC, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     5ae:	ec eb       	ldi	r30, 0xBC	; 188
     5b0:	f0 e0       	ldi	r31, 0x00	; 0
     5b2:	80 81       	ld	r24, Z
     5b4:	88 23       	and	r24, r24
     5b6:	ec f7       	brge	.-6      	; 0x5b2 <I2CWriteByte+0x46>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     5b8:	80 91 b9 00 	lds	r24, 0x00B9
     5bc:	88 7f       	andi	r24, 0xF8	; 248
     5be:	88 32       	cpi	r24, 0x28	; 40
     5c0:	91 f4       	brne	.+36     	; 0x5e6 <I2CWriteByte+0x7a>
		return FALSE;

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     5c2:	84 e9       	ldi	r24, 0x94	; 148
     5c4:	80 93 bc 00 	sts	0x00BC, r24
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     5c8:	ec eb       	ldi	r30, 0xBC	; 188
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	84 fd       	sbrc	r24, 4
     5d0:	fd cf       	rjmp	.-6      	; 0x5cc <I2CWriteByte+0x60>
     5d2:	8f eb       	ldi	r24, 0xBF	; 191
     5d4:	9d e5       	ldi	r25, 0x5D	; 93
     5d6:	01 97       	sbiw	r24, 0x01	; 1
     5d8:	f1 f7       	brne	.-4      	; 0x5d6 <I2CWriteByte+0x6a>
     5da:	00 c0       	rjmp	.+0      	; 0x5dc <I2CWriteByte+0x70>
     5dc:	00 00       	nop

	//Wait untill Writing is complete
	_delay_ms(12);

	//Return TRUE
	return TRUE;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	03 c0       	rjmp	.+6      	; 0x5e8 <I2CWriteByte+0x7c>
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	01 c0       	rjmp	.+2      	; 0x5e8 <I2CWriteByte+0x7c>
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     5e6:	80 e0       	ldi	r24, 0x00	; 0
	//Wait untill Writing is complete
	_delay_ms(12);

	//Return TRUE
	return TRUE;
}
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <I2CReadByte>:
uint8_t I2CReadByte(uint8_t address)	
{
	uint8_t data;
	
	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     5ee:	94 ea       	ldi	r25, 0xA4	; 164
     5f0:	90 93 bc 00 	sts	0x00BC, r25

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     5f4:	ec eb       	ldi	r30, 0xBC	; 188
     5f6:	f0 e0       	ldi	r31, 0x00	; 0
     5f8:	90 81       	ld	r25, Z
     5fa:	99 23       	and	r25, r25
     5fc:	ec f7       	brge	.-6      	; 0x5f8 <I2CReadByte+0xa>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     5fe:	90 91 b9 00 	lds	r25, 0x00B9
     602:	98 7f       	andi	r25, 0xF8	; 248
     604:	90 31       	cpi	r25, 0x10	; 16
     606:	41 f5       	brne	.+80     	; 0x658 <I2CReadByte+0x6a>
		return FALSE;

	//Now write SLA+R
	//TWDR=0b10100001;	
	TWDR = address | 0x01;	//set LSB: read operation
     608:	81 60       	ori	r24, 0x01	; 1
     60a:	80 93 bb 00 	sts	0x00BB, r24

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     60e:	84 e8       	ldi	r24, 0x84	; 132
     610:	80 93 bc 00 	sts	0x00BC, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     614:	ec eb       	ldi	r30, 0xBC	; 188
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	88 23       	and	r24, r24
     61c:	ec f7       	brge	.-6      	; 0x618 <I2CReadByte+0x2a>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     61e:	80 91 b9 00 	lds	r24, 0x00B9
     622:	88 7f       	andi	r24, 0xF8	; 248
     624:	80 34       	cpi	r24, 0x40	; 64
     626:	d1 f4       	brne	.+52     	; 0x65c <I2CReadByte+0x6e>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     628:	84 e8       	ldi	r24, 0x84	; 132
     62a:	80 93 bc 00 	sts	0x00BC, r24

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     62e:	ec eb       	ldi	r30, 0xBC	; 188
     630:	f0 e0       	ldi	r31, 0x00	; 0
     632:	80 81       	ld	r24, Z
     634:	88 23       	and	r24, r24
     636:	ec f7       	brge	.-6      	; 0x632 <I2CReadByte+0x44>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     638:	80 91 b9 00 	lds	r24, 0x00B9
     63c:	88 7f       	andi	r24, 0xF8	; 248
     63e:	88 35       	cpi	r24, 0x58	; 88
     640:	79 f4       	brne	.+30     	; 0x660 <I2CReadByte+0x72>
		return FALSE;

	//Read the data
	data=TWDR;
     642:	80 91 bb 00 	lds	r24, 0x00BB

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     646:	94 e9       	ldi	r25, 0x94	; 148
     648:	90 93 bc 00 	sts	0x00BC, r25
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     64c:	ec eb       	ldi	r30, 0xBC	; 188
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	90 81       	ld	r25, Z
     652:	94 fd       	sbrc	r25, 4
     654:	fd cf       	rjmp	.-6      	; 0x650 <I2CReadByte+0x62>
     656:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	08 95       	ret
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	08 95       	ret
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     660:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;	
}
     662:	08 95       	ret

00000664 <decodeBCD>:
	uint8_t retValue;
	
	char one;
	char ten;
	
	BCDvalue = BCDvalue & mask;
     664:	68 23       	and	r22, r24
	
	one = BCDvalue & 0x0F;	//lower 4 bits
	ten = (BCDvalue>>4) & 0x0F;		//higher bits
     666:	86 2f       	mov	r24, r22
     668:	82 95       	swap	r24
     66a:	8f 70       	andi	r24, 0x0F	; 15
	
	retValue = ten * 10 + one;
     66c:	88 0f       	add	r24, r24
     66e:	98 2f       	mov	r25, r24
     670:	99 0f       	add	r25, r25
     672:	99 0f       	add	r25, r25
     674:	89 0f       	add	r24, r25
	char one;
	char ten;
	
	BCDvalue = BCDvalue & mask;
	
	one = BCDvalue & 0x0F;	//lower 4 bits
     676:	6f 70       	andi	r22, 0x0F	; 15
	ten = (BCDvalue>>4) & 0x0F;		//higher bits
	
	retValue = ten * 10 + one;
	
	return retValue;
}
     678:	86 0f       	add	r24, r22
     67a:	08 95       	ret

0000067c <toBCD>:
	uint8_t zehner,einer,bcd_zahl;
	zehner = 0;
	einer = 0;
	bcd_zahl = 0;
	
	if(zahl < 60)
     67c:	8c 33       	cpi	r24, 0x3C	; 60
     67e:	68 f4       	brcc	.+26     	; 0x69a <toBCD+0x1e>
	{
		while(zahl>9)
     680:	8a 30       	cpi	r24, 0x0A	; 10
     682:	30 f0       	brcs	.+12     	; 0x690 <toBCD+0x14>
     684:	90 e0       	ldi	r25, 0x00	; 0
		{
			zahl = zahl - 10;
     686:	8a 50       	subi	r24, 0x0A	; 10
			zehner ++;
     688:	9f 5f       	subi	r25, 0xFF	; 255
	einer = 0;
	bcd_zahl = 0;
	
	if(zahl < 60)
	{
		while(zahl>9)
     68a:	8a 30       	cpi	r24, 0x0A	; 10
     68c:	e0 f7       	brcc	.-8      	; 0x686 <toBCD+0xa>
     68e:	01 c0       	rjmp	.+2      	; 0x692 <toBCD+0x16>
     690:	90 e0       	ldi	r25, 0x00	; 0
			zahl = zahl - 10;
			zehner ++;
		}
		einer = zahl;
	
		bcd_zahl = (zehner<<4);
     692:	92 95       	swap	r25
     694:	90 7f       	andi	r25, 0xF0	; 240
		bcd_zahl |= einer;
     696:	89 2b       	or	r24, r25
	
		return bcd_zahl;
     698:	08 95       	ret
	}	
	else
		return 0;
     69a:	80 e0       	ldi	r24, 0x00	; 0
}
     69c:	08 95       	ret

0000069e <SRAMReadByte>:

uint8_t SRAMReadByte(uint8_t address)
{
     69e:	cf 93       	push	r28
     6a0:	df 93       	push	r29
	uint8_t data;

	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     6a2:	ec eb       	ldi	r30, 0xBC	; 188
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	24 ea       	ldi	r18, 0xA4	; 164

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
     6a8:	a9 eb       	ldi	r26, 0xB9	; 185
     6aa:	b0 e0       	ldi	r27, 0x00	; 0
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR = SRAM_write;
     6ac:	cb eb       	ldi	r28, 0xBB	; 187
     6ae:	d0 e0       	ldi	r29, 0x00	; 0
     6b0:	4e ed       	ldi	r20, 0xDE	; 222
		//TWDR = EEPROM_write;
		//TWDR=0b10100000;	

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     6b2:	34 e8       	ldi	r19, 0x84	; 132
	uint8_t data;

	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     6b4:	20 83       	st	Z, r18

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     6b6:	90 81       	ld	r25, Z
     6b8:	99 23       	and	r25, r25
     6ba:	ec f7       	brge	.-6      	; 0x6b6 <SRAMReadByte+0x18>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     6bc:	9c 91       	ld	r25, X
     6be:	98 7f       	andi	r25, 0xF8	; 248
     6c0:	98 30       	cpi	r25, 0x08	; 8
     6c2:	09 f0       	breq	.+2      	; 0x6c6 <SRAMReadByte+0x28>
     6c4:	4d c0       	rjmp	.+154    	; 0x760 <SRAMReadByte+0xc2>
			return FALSE;

		//Now write SLA+W
		//EEPROM @ 00h
		TWDR = SRAM_write;
     6c6:	48 83       	st	Y, r20
		//TWDR = EEPROM_write;
		//TWDR=0b10100000;	

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     6c8:	30 83       	st	Z, r19

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     6ca:	90 81       	ld	r25, Z
     6cc:	99 23       	and	r25, r25
     6ce:	ec f7       	brge	.-6      	; 0x6ca <SRAMReadByte+0x2c>
	
	}while((TWSR & 0xF8) != 0x18);
     6d0:	9c 91       	ld	r25, X
     6d2:	98 7f       	andi	r25, 0xF8	; 248
     6d4:	98 31       	cpi	r25, 0x18	; 24
     6d6:	71 f7       	brne	.-36     	; 0x6b4 <SRAMReadByte+0x16>
		
	//Now write ADDR
	TWDR=(address);
     6d8:	80 93 bb 00 	sts	0x00BB, r24

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     6dc:	84 e8       	ldi	r24, 0x84	; 132
     6de:	80 93 bc 00 	sts	0x00BC, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     6e2:	ec eb       	ldi	r30, 0xBC	; 188
     6e4:	f0 e0       	ldi	r31, 0x00	; 0
     6e6:	80 81       	ld	r24, Z
     6e8:	88 23       	and	r24, r24
     6ea:	ec f7       	brge	.-6      	; 0x6e6 <SRAMReadByte+0x48>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     6ec:	80 91 b9 00 	lds	r24, 0x00B9
     6f0:	88 7f       	andi	r24, 0xF8	; 248
     6f2:	88 32       	cpi	r24, 0x28	; 40
     6f4:	b9 f5       	brne	.+110    	; 0x764 <SRAMReadByte+0xc6>
		return FALSE;

	//Put Start Condition on TWI Bus
	TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     6f6:	84 ea       	ldi	r24, 0xA4	; 164
     6f8:	80 93 bc 00 	sts	0x00BC, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     6fc:	ec eb       	ldi	r30, 0xBC	; 188
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 81       	ld	r24, Z
     702:	88 23       	and	r24, r24
     704:	ec f7       	brge	.-6      	; 0x700 <SRAMReadByte+0x62>

	//Check status
	if((TWSR & 0xF8) != 0x10)
     706:	80 91 b9 00 	lds	r24, 0x00B9
     70a:	88 7f       	andi	r24, 0xF8	; 248
     70c:	80 31       	cpi	r24, 0x10	; 16
     70e:	61 f5       	brne	.+88     	; 0x768 <SRAMReadByte+0xca>
		return FALSE;

	//Now write EEPROM+READ
	TWDR = SRAM_read;
     710:	8f ed       	ldi	r24, 0xDF	; 223
     712:	80 93 bb 00 	sts	0x00BB, r24

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     716:	84 e8       	ldi	r24, 0x84	; 132
     718:	80 93 bc 00 	sts	0x00BC, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     71c:	ec eb       	ldi	r30, 0xBC	; 188
     71e:	f0 e0       	ldi	r31, 0x00	; 0
     720:	80 81       	ld	r24, Z
     722:	88 23       	and	r24, r24
     724:	ec f7       	brge	.-6      	; 0x720 <SRAMReadByte+0x82>

	//Check status
	if((TWSR & 0xF8) != 0x40)
     726:	80 91 b9 00 	lds	r24, 0x00B9
     72a:	88 7f       	andi	r24, 0xF8	; 248
     72c:	80 34       	cpi	r24, 0x40	; 64
     72e:	f1 f4       	brne	.+60     	; 0x76c <SRAMReadByte+0xce>
		return FALSE;

	//Now enable Reception of data by clearing TWINT
	TWCR=(1<<TWINT)|(1<<TWEN);
     730:	84 e8       	ldi	r24, 0x84	; 132
     732:	80 93 bc 00 	sts	0x00BC, r24

	//Wait till done
	while(!(TWCR & (1<<TWINT)));
     736:	ec eb       	ldi	r30, 0xBC	; 188
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	80 81       	ld	r24, Z
     73c:	88 23       	and	r24, r24
     73e:	ec f7       	brge	.-6      	; 0x73a <SRAMReadByte+0x9c>

	//Check status
	if((TWSR & 0xF8) != 0x58)
     740:	80 91 b9 00 	lds	r24, 0x00B9
     744:	88 7f       	andi	r24, 0xF8	; 248
     746:	88 35       	cpi	r24, 0x58	; 88
     748:	99 f4       	brne	.+38     	; 0x770 <SRAMReadByte+0xd2>
		return FALSE;

	//Read the data
	data=TWDR;
     74a:	80 91 bb 00 	lds	r24, 0x00BB

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     74e:	94 e9       	ldi	r25, 0x94	; 148
     750:	90 93 bc 00 	sts	0x00BC, r25
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     754:	ec eb       	ldi	r30, 0xBC	; 188
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	90 81       	ld	r25, Z
     75a:	94 fd       	sbrc	r25, 4
     75c:	fd cf       	rjmp	.-6      	; 0x758 <SRAMReadByte+0xba>
     75e:	09 c0       	rjmp	.+18     	; 0x772 <SRAMReadByte+0xd4>
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     760:	80 e0       	ldi	r24, 0x00	; 0
     762:	07 c0       	rjmp	.+14     	; 0x772 <SRAMReadByte+0xd4>
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	05 c0       	rjmp	.+10     	; 0x772 <SRAMReadByte+0xd4>
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x10)
		return FALSE;
     768:	80 e0       	ldi	r24, 0x00	; 0
     76a:	03 c0       	rjmp	.+6      	; 0x772 <SRAMReadByte+0xd4>
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x40)
		return FALSE;
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	01 c0       	rjmp	.+2      	; 0x772 <SRAMReadByte+0xd4>
	//Wait till done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x58)
		return FALSE;
     770:	80 e0       	ldi	r24, 0x00	; 0
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));

	//Return TRUE
	return data;
}
     772:	df 91       	pop	r29
     774:	cf 91       	pop	r28
     776:	08 95       	ret

00000778 <RTC_getTime_Year>:
{
	return decodeBCD(SRAMReadByte(ADD_time_month),0x1F);
}
uint8_t RTC_getTime_Year()
{
	return decodeBCD(SRAMReadByte(ADD_time_year),0xFF);
     778:	86 e0       	ldi	r24, 0x06	; 6
     77a:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
     77e:	6f ef       	ldi	r22, 0xFF	; 255
     780:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
}
     784:	08 95       	ret

00000786 <RTC_getTime_Month>:
{
	return decodeBCD(SRAMReadByte(ADD_time_date),0x3F);	
}
uint8_t RTC_getTime_Month()
{
	return decodeBCD(SRAMReadByte(ADD_time_month),0x1F);
     786:	85 e0       	ldi	r24, 0x05	; 5
     788:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
     78c:	6f e1       	ldi	r22, 0x1F	; 31
     78e:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
}
     792:	08 95       	ret

00000794 <RTC_getTime_Day>:
{
	return decodeBCD(SRAMReadByte(ADD_time_day),0x07);	
}
uint8_t RTC_getTime_Day()
{
	return decodeBCD(SRAMReadByte(ADD_time_date),0x3F);	
     794:	84 e0       	ldi	r24, 0x04	; 4
     796:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
     79a:	6f e3       	ldi	r22, 0x3F	; 63
     79c:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
}
     7a0:	08 95       	ret

000007a2 <RTC_getTime_WeekDay>:
	return decodeBCD(SRAMReadByte(ADD_time_hour),0x3F);
}

uint8_t RTC_getTime_WeekDay()
{
	return decodeBCD(SRAMReadByte(ADD_time_day),0x07);	
     7a2:	83 e0       	ldi	r24, 0x03	; 3
     7a4:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
     7a8:	67 e0       	ldi	r22, 0x07	; 7
     7aa:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
}
     7ae:	08 95       	ret

000007b0 <RTC_getTime_Hour>:
{
	return decodeBCD(SRAMReadByte(ADD_time_min),0x7F);
}
uint8_t RTC_getTime_Hour()
{
	return decodeBCD(SRAMReadByte(ADD_time_hour),0x3F);
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
     7b6:	6f e3       	ldi	r22, 0x3F	; 63
     7b8:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
}
     7bc:	08 95       	ret

000007be <RTC_getTime_Minute>:
{
	return decodeBCD(SRAMReadByte(ADD_time_sec),0x7F);
}
uint8_t RTC_getTime_Minute()
{
	return decodeBCD(SRAMReadByte(ADD_time_min),0x7F);
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
     7c4:	6f e7       	ldi	r22, 0x7F	; 127
     7c6:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
}
     7ca:	08 95       	ret

000007cc <RTC_getTime_Second>:
	SRAMWriteByte(0x03,configByte);
}

uint8_t RTC_getTime_Second()
{
	return decodeBCD(SRAMReadByte(ADD_time_sec),0x7F);
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
     7d2:	6f e7       	ldi	r22, 0x7F	; 127
     7d4:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
}
     7d8:	08 95       	ret

000007da <SRAMWriteByte>:

	//Return TRUE
	return data;
}
uint8_t SRAMWriteByte(uint8_t address,uint8_t data)
{
     7da:	cf 93       	push	r28
     7dc:	df 93       	push	r29
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     7de:	ec eb       	ldi	r30, 0xBC	; 188
     7e0:	f0 e0       	ldi	r31, 0x00	; 0
     7e2:	24 ea       	ldi	r18, 0xA4	; 164
		
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
     7e4:	a9 eb       	ldi	r26, 0xB9	; 185
     7e6:	b0 e0       	ldi	r27, 0x00	; 0
			return FALSE;

		//Now write RTC_SRAM+WRITE
		TWDR = SRAM_write;
     7e8:	cb eb       	ldi	r28, 0xBB	; 187
     7ea:	d0 e0       	ldi	r29, 0x00	; 0
     7ec:	4e ed       	ldi	r20, 0xDE	; 222

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     7ee:	34 e8       	ldi	r19, 0x84	; 132
uint8_t SRAMWriteByte(uint8_t address,uint8_t data)
{
	do
	{
		//Put Start Condition on TWI Bus
		TWCR=(1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     7f0:	20 83       	st	Z, r18
		
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     7f2:	90 81       	ld	r25, Z
     7f4:	99 23       	and	r25, r25
     7f6:	ec f7       	brge	.-6      	; 0x7f2 <SRAMWriteByte+0x18>

		//Check status
		if((TWSR & 0xF8) != 0x08)
     7f8:	9c 91       	ld	r25, X
     7fa:	98 7f       	andi	r25, 0xF8	; 248
     7fc:	98 30       	cpi	r25, 0x08	; 8
     7fe:	b9 f5       	brne	.+110    	; 0x86e <SRAMWriteByte+0x94>
			return FALSE;

		//Now write RTC_SRAM+WRITE
		TWDR = SRAM_write;
     800:	48 83       	st	Y, r20

		//Initiate Transfer
		TWCR=(1<<TWINT)|(1<<TWEN);
     802:	30 83       	st	Z, r19

		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));
     804:	90 81       	ld	r25, Z
     806:	99 23       	and	r25, r25
     808:	ec f7       	brge	.-6      	; 0x804 <SRAMWriteByte+0x2a>
	
	}while((TWSR & 0xF8) != 0x18);
     80a:	9c 91       	ld	r25, X
     80c:	98 7f       	andi	r25, 0xF8	; 248
     80e:	98 31       	cpi	r25, 0x18	; 24
     810:	79 f7       	brne	.-34     	; 0x7f0 <SRAMWriteByte+0x16>
		

	//Now write ADDR
	TWDR=(address);
     812:	80 93 bb 00 	sts	0x00BB, r24

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     816:	84 e8       	ldi	r24, 0x84	; 132
     818:	80 93 bc 00 	sts	0x00BC, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     81c:	ec eb       	ldi	r30, 0xBC	; 188
     81e:	f0 e0       	ldi	r31, 0x00	; 0
     820:	80 81       	ld	r24, Z
     822:	88 23       	and	r24, r24
     824:	ec f7       	brge	.-6      	; 0x820 <SRAMWriteByte+0x46>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     826:	80 91 b9 00 	lds	r24, 0x00B9
     82a:	88 7f       	andi	r24, 0xF8	; 248
     82c:	88 32       	cpi	r24, 0x28	; 40
     82e:	09 f5       	brne	.+66     	; 0x872 <SRAMWriteByte+0x98>
		return FALSE;

	//Now write DATA
	TWDR=(data);
     830:	60 93 bb 00 	sts	0x00BB, r22

	//Initiate Transfer
	TWCR=(1<<TWINT)|(1<<TWEN);
     834:	84 e8       	ldi	r24, 0x84	; 132
     836:	80 93 bc 00 	sts	0x00BC, r24

	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));
     83a:	ec eb       	ldi	r30, 0xBC	; 188
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	80 81       	ld	r24, Z
     840:	88 23       	and	r24, r24
     842:	ec f7       	brge	.-6      	; 0x83e <SRAMWriteByte+0x64>

	//Check status
	if((TWSR & 0xF8) != 0x28)
     844:	80 91 b9 00 	lds	r24, 0x00B9
     848:	88 7f       	andi	r24, 0xF8	; 248
     84a:	88 32       	cpi	r24, 0x28	; 40
     84c:	a1 f4       	brne	.+40     	; 0x876 <SRAMWriteByte+0x9c>
		return FALSE;

	//Put Stop Condition on bus
	TWCR=(1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
     84e:	84 e9       	ldi	r24, 0x94	; 148
     850:	80 93 bc 00 	sts	0x00BC, r24
	
	//Wait for STOP to finish
	while(TWCR & (1<<TWSTO));
     854:	ec eb       	ldi	r30, 0xBC	; 188
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	84 fd       	sbrc	r24, 4
     85c:	fd cf       	rjmp	.-6      	; 0x858 <SRAMWriteByte+0x7e>
     85e:	8f eb       	ldi	r24, 0xBF	; 191
     860:	9d e5       	ldi	r25, 0x5D	; 93
     862:	01 97       	sbiw	r24, 0x01	; 1
     864:	f1 f7       	brne	.-4      	; 0x862 <SRAMWriteByte+0x88>
     866:	00 c0       	rjmp	.+0      	; 0x868 <SRAMWriteByte+0x8e>
     868:	00 00       	nop

	//Wait untill Writing is complete
	_delay_ms(12);

	//Return TRUE
	return TRUE;
     86a:	81 e0       	ldi	r24, 0x01	; 1
     86c:	05 c0       	rjmp	.+10     	; 0x878 <SRAMWriteByte+0x9e>
		//Poll Till Done
		while(!(TWCR & (1<<TWINT)));

		//Check status
		if((TWSR & 0xF8) != 0x08)
			return FALSE;
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	03 c0       	rjmp	.+6      	; 0x878 <SRAMWriteByte+0x9e>
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     872:	80 e0       	ldi	r24, 0x00	; 0
     874:	01 c0       	rjmp	.+2      	; 0x878 <SRAMWriteByte+0x9e>
	//Poll Till Done
	while(!(TWCR & (1<<TWINT)));

	//Check status
	if((TWSR & 0xF8) != 0x28)
		return FALSE;
     876:	80 e0       	ldi	r24, 0x00	; 0
	_delay_ms(12);

	//Return TRUE
	return TRUE;

}
     878:	df 91       	pop	r29
     87a:	cf 91       	pop	r28
     87c:	08 95       	ret

0000087e <RTC_start>:
		configByte &= ~(1<<3);
		
	SRAMWriteByte(0x03,configByte);
}
uint8_t RTC_start(uint8_t start)
{
     87e:	1f 93       	push	r17
     880:	18 2f       	mov	r17, r24
	uint8_t configByte;
	configByte = SRAMReadByte(0x00);
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
	if(start)
     888:	11 23       	and	r17, r17
     88a:	19 f0       	breq	.+6      	; 0x892 <RTC_start+0x14>
		configByte |= (1<<7);
     88c:	68 2f       	mov	r22, r24
     88e:	60 68       	ori	r22, 0x80	; 128
     890:	02 c0       	rjmp	.+4      	; 0x896 <RTC_start+0x18>
	else
		configByte &= ~(1<<7);
     892:	68 2f       	mov	r22, r24
     894:	6f 77       	andi	r22, 0x7F	; 127
		
	SRAMWriteByte(0x00,configByte);
     896:	80 e0       	ldi	r24, 0x00	; 0
     898:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	return TRUE;
}
     89c:	81 e0       	ldi	r24, 0x01	; 1
     89e:	1f 91       	pop	r17
     8a0:	08 95       	ret

000008a2 <RTC_enableBat>:
{
	return decodeBCD(SRAMReadByte(ADD_time_year),0xFF);
}

void RTC_enableBat(uint8_t batEn)	//1=enabled 0=disabled
{
     8a2:	1f 93       	push	r17
     8a4:	18 2f       	mov	r17, r24
	uint8_t configByte;
	configByte = SRAMReadByte(0x03);
     8a6:	83 e0       	ldi	r24, 0x03	; 3
     8a8:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
	if(batEn)
     8ac:	11 23       	and	r17, r17
     8ae:	19 f0       	breq	.+6      	; 0x8b6 <RTC_enableBat+0x14>
		configByte |= (1<<3);
     8b0:	68 2f       	mov	r22, r24
     8b2:	68 60       	ori	r22, 0x08	; 8
     8b4:	02 c0       	rjmp	.+4      	; 0x8ba <RTC_enableBat+0x18>
	else
		configByte &= ~(1<<3);
     8b6:	68 2f       	mov	r22, r24
     8b8:	67 7f       	andi	r22, 0xF7	; 247
		
	SRAMWriteByte(0x03,configByte);
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
}
     8c0:	1f 91       	pop	r17
     8c2:	08 95       	ret

000008c4 <RTC_setDay>:
	SRAMWriteByte(ADD_time_date,toBCD(date));	// tag
	SRAMWriteByte(ADD_time_month,toBCD(month)); //	monat
	SRAMWriteByte(ADD_time_year,toBCD(year));	//	jahr
}
void RTC_setDay(uint8_t day)
{
     8c4:	1f 93       	push	r17
     8c6:	18 2f       	mov	r17, r24
	uint8_t configByte;
	configByte = SRAMReadByte(0x03);
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
	configByte &= 0xF8; //clear firt 3 bits
     8ce:	88 7f       	andi	r24, 0xF8	; 248
	configByte |= (day & 0x07); //mask the first 3 bit
     8d0:	17 70       	andi	r17, 0x07	; 7
     8d2:	68 2f       	mov	r22, r24
     8d4:	61 2b       	or	r22, r17
	
	SRAMWriteByte(0x03,configByte);
     8d6:	83 e0       	ldi	r24, 0x03	; 3
     8d8:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
}
     8dc:	1f 91       	pop	r17
     8de:	08 95       	ret

000008e0 <RTC_setDate>:
	//SRAMWriteByte(0x00,(toBCD(second) & (1<<7)) );	//seconds,0	and start counting!

	
}
void RTC_setDate(uint8_t date, uint8_t month, uint8_t year)
{
     8e0:	0f 93       	push	r16
     8e2:	1f 93       	push	r17
     8e4:	06 2f       	mov	r16, r22
     8e6:	14 2f       	mov	r17, r20
	SRAMWriteByte(ADD_time_date,toBCD(date));	// tag
     8e8:	0e 94 3e 03 	call	0x67c	; 0x67c <toBCD>
     8ec:	68 2f       	mov	r22, r24
     8ee:	84 e0       	ldi	r24, 0x04	; 4
     8f0:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	SRAMWriteByte(ADD_time_month,toBCD(month)); //	monat
     8f4:	80 2f       	mov	r24, r16
     8f6:	0e 94 3e 03 	call	0x67c	; 0x67c <toBCD>
     8fa:	68 2f       	mov	r22, r24
     8fc:	85 e0       	ldi	r24, 0x05	; 5
     8fe:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	SRAMWriteByte(ADD_time_year,toBCD(year));	//	jahr
     902:	81 2f       	mov	r24, r17
     904:	0e 94 3e 03 	call	0x67c	; 0x67c <toBCD>
     908:	68 2f       	mov	r22, r24
     90a:	86 e0       	ldi	r24, 0x06	; 6
     90c:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
}
     910:	1f 91       	pop	r17
     912:	0f 91       	pop	r16
     914:	08 95       	ret

00000916 <RTC_setTime>:
	 
	SRAMWriteByte(0x07,0b00010000); //alarm0 ON
}

void RTC_setTime(uint8_t hour,uint8_t minute,uint8_t second)
{
     916:	0f 93       	push	r16
     918:	1f 93       	push	r17
     91a:	18 2f       	mov	r17, r24
     91c:	06 2f       	mov	r16, r22
     91e:	84 2f       	mov	r24, r20
	SRAMWriteByte(0x00,toBCD(second));
     920:	0e 94 3e 03 	call	0x67c	; 0x67c <toBCD>
     924:	68 2f       	mov	r22, r24
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	SRAMWriteByte(0x01,toBCD(minute));	//minute
     92c:	80 2f       	mov	r24, r16
     92e:	0e 94 3e 03 	call	0x67c	; 0x67c <toBCD>
     932:	68 2f       	mov	r22, r24
     934:	81 e0       	ldi	r24, 0x01	; 1
     936:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	SRAMWriteByte(0x02,toBCD(hour));	//hour
     93a:	81 2f       	mov	r24, r17
     93c:	0e 94 3e 03 	call	0x67c	; 0x67c <toBCD>
     940:	68 2f       	mov	r22, r24
     942:	82 e0       	ldi	r24, 0x02	; 2
     944:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	
	
	//SRAMWriteByte(0x00,(toBCD(second) & (1<<7)) );	//seconds,0	and start counting!

	
}
     948:	1f 91       	pop	r17
     94a:	0f 91       	pop	r16
     94c:	08 95       	ret

0000094e <RTC_setAlert0>:

/*	funktions	*/

void RTC_setAlert0()
{
	SRAMWriteByte(0x0B,0x10); //minute
     94e:	8b e0       	ldi	r24, 0x0B	; 11
     950:	60 e1       	ldi	r22, 0x10	; 16
     952:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	SRAMWriteByte(0x0C,0x18); //hour
     956:	8c e0       	ldi	r24, 0x0C	; 12
     958:	68 e1       	ldi	r22, 0x18	; 24
     95a:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	SRAMWriteByte(0x0E,0x07); //date
     95e:	8e e0       	ldi	r24, 0x0E	; 14
     960:	67 e0       	ldi	r22, 0x07	; 7
     962:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	SRAMWriteByte(0x0F,0x11); //month 	
     966:	8f e0       	ldi	r24, 0x0F	; 15
     968:	61 e1       	ldi	r22, 0x11	; 17
     96a:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
 	
	
	SRAMWriteByte(0x0D,0b11110011); //match at matchAll day=3
     96e:	8d e0       	ldi	r24, 0x0D	; 13
     970:	63 ef       	ldi	r22, 0xF3	; 243
     972:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	 //SRAMWriteByte(0x0D,0b00010011); //alarm0 configure (pol=1 match:minutes)
	 
	SRAMWriteByte(0x07,0b00010000); //alarm0 ON
     976:	87 e0       	ldi	r24, 0x07	; 7
     978:	60 e1       	ldi	r22, 0x10	; 16
     97a:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
}
     97e:	08 95       	ret

00000980 <lm75_setAddress>:
/************************************************************************/

void lm75_setAddress(uint8_t add)
{
	//Adress: 1001.XXX(R/W)
	add &= 0x0F;		//clear bit7-4
     980:	8f 70       	andi	r24, 0x0F	; 15
	add |= 0b10010000;	//set factury adress bits 7-4
     982:	80 69       	ori	r24, 0x90	; 144
	lm75Address = add;
     984:	80 93 e6 01 	sts	0x01E6, r24
     988:	10 92 e7 01 	sts	0x01E7, r1
}
     98c:	08 95       	ret

0000098e <init>:

void init(void)
{
	
	/* LED */
	LED_DDR |= (1<<LED_NR);
     98e:	26 9a       	sbi	0x04, 6	; 4
	
	/*	LCD Backlight	*/
	LCD_BL_DDR |= (1<<LCD_BL_PIN);
     990:	54 9a       	sbi	0x0a, 4	; 10
	
	/*	Buttons */
	BUTTON_DDR &= ~(1<<BUTTON1_NR);	//B1 input
     992:	3b 98       	cbi	0x07, 3	; 7
	BUTTON_PORT |= (1<<BUTTON1_NR);	//B1 pullup
     994:	43 9a       	sbi	0x08, 3	; 8
	BUTTON_DDR &= ~(1<<BUTTON2_NR);	//B2 input
     996:	3a 98       	cbi	0x07, 2	; 7
	BUTTON_PORT |= (1<<BUTTON2_NR);	//B2 pullup
     998:	42 9a       	sbi	0x08, 2	; 8
	BUTTON_DDR &= ~(1<<BUTTON3_NR);	//B3 input
     99a:	38 98       	cbi	0x07, 0	; 7
	BUTTON_PORT |= (1<<BUTTON3_NR);	//B3 pullup
     99c:	40 9a       	sbi	0x08, 0	; 8
	
	/* Encoder (PCINT21-23)	*/
	ENCODER_DDR &= ~(1<<ENCODER_A_NR);
     99e:	56 98       	cbi	0x0a, 6	; 10
	ENCODER_DDR &= ~(1<<ENCODER_B_NR);
     9a0:	55 98       	cbi	0x0a, 5	; 10
	ENCODER_DDR &= ~(1<<ENCODER_BUTTON_NR);
     9a2:	57 98       	cbi	0x0a, 7	; 10
	ENCODER_PORT |= (1<<ENCODER_A_NR) | (1<<ENCODER_B_NR) | (1<<ENCODER_BUTTON_NR);	//pullup
     9a4:	8b b1       	in	r24, 0x0b	; 11
     9a6:	80 6e       	ori	r24, 0xE0	; 224
     9a8:	8b b9       	out	0x0b, r24	; 11
	
	
	PCICR |= (1<<PCIE1);	//enable PCINT 8-14
     9aa:	e8 e6       	ldi	r30, 0x68	; 104
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 81       	ld	r24, Z
     9b0:	82 60       	ori	r24, 0x02	; 2
     9b2:	80 83       	st	Z, r24
	PCICR |= (1<<PCIE2);	//enable PCINT 16-23
     9b4:	80 81       	ld	r24, Z
     9b6:	84 60       	ori	r24, 0x04	; 4
     9b8:	80 83       	st	Z, r24
	PCIFR |= (1<<PCIF1);	//enable interrupt request PCINT 8-14
     9ba:	d9 9a       	sbi	0x1b, 1	; 27
	PCIFR |= (1<<PCIF2);	//enable interrupt request PCINT 16-23
     9bc:	da 9a       	sbi	0x1b, 2	; 27
	PCMSK1 |= (1<<PCINT8) | (1<<PCINT10) | (1<<PCINT11); //Buttons PCINT8 PCINT10 PCINT11
     9be:	ec e6       	ldi	r30, 0x6C	; 108
     9c0:	f0 e0       	ldi	r31, 0x00	; 0
     9c2:	80 81       	ld	r24, Z
     9c4:	8d 60       	ori	r24, 0x0D	; 13
     9c6:	80 83       	st	Z, r24
	PCMSK2 |= (1<<PCINT21) | (1<<PCINT22) | (1<<PCINT23); //Encoder (PCINT21-23)
     9c8:	ed e6       	ldi	r30, 0x6D	; 109
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	80 81       	ld	r24, Z
     9ce:	80 6e       	ori	r24, 0xE0	; 224
     9d0:	80 83       	st	Z, r24
	
	
	/*	UART	*/
	DDRD |= (1<<1); // TX as Output
     9d2:	51 9a       	sbi	0x0a, 1	; 10
	DDRD &= ~(1<<0); //RX as Input 
     9d4:	50 98       	cbi	0x0a, 0	; 10
	USARTInit(MYUBRR);  //15 == UBRR
     9d6:	89 e1       	ldi	r24, 0x19	; 25
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	0e 94 64 02 	call	0x4c8	; 0x4c8 <USARTInit>
	
	/* I2C	*/
	DDRC |= (1<<5);
     9de:	3d 9a       	sbi	0x07, 5	; 7
	I2CInit();	
     9e0:	0e 94 ad 02 	call	0x55a	; 0x55a <I2CInit>
	
	/*	MCP79410 RTC	*/
	RTC_INT_DDR &= ~(1<<RTC_INT_NR);	//input
     9e4:	53 98       	cbi	0x0a, 3	; 10
	RTC_INT_PORT |= (1<<RTC_INT_NR);	//int. pullup
     9e6:	5b 9a       	sbi	0x0b, 3	; 11
	EICRA |= (1<<ISC10);
     9e8:	e9 e6       	ldi	r30, 0x69	; 105
     9ea:	f0 e0       	ldi	r31, 0x00	; 0
     9ec:	80 81       	ld	r24, Z
     9ee:	84 60       	ori	r24, 0x04	; 4
     9f0:	80 83       	st	Z, r24
	EIMSK |= (1<<INT1);
     9f2:	e9 9a       	sbi	0x1d, 1	; 29
	
	/*	LM75 Temperatur Sensor	*/
	lm75_setAddress(0x00); //A0-A2 'low'
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	0e 94 c0 04 	call	0x980	; 0x980 <lm75_setAddress>
	
	/*	Summer	*/
	SUMMER_DDR |= (1<<SUMMER_NR);
     9fa:	27 9a       	sbi	0x04, 7	; 4
	
	/* LCD	*/
	lcd_init();
     9fc:	0e 94 90 00 	call	0x120	; 0x120 <lcd_init>
	
}
     a00:	08 95       	ret

00000a02 <lm75_getAdress>:
uint8_t lm75_getAdress()
{
	return lm75Address;
}
     a02:	80 91 e6 01 	lds	r24, 0x01E6
     a06:	08 95       	ret

00000a08 <lm75_setPointer>:
	return currTemp;	
}

void lm75_setPointer(uint8_t adress)
{
	I2CWriteByte((lm75Address & 0xFE),RS_TEMP);
     a08:	80 91 e6 01 	lds	r24, 0x01E6
     a0c:	8e 7f       	andi	r24, 0xFE	; 254
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	0e 94 b6 02 	call	0x56c	; 0x56c <I2CWriteByte>
}
     a14:	08 95       	ret

00000a16 <lm75_readUint8Temp>:
	return lm75Address;
}

uint8_t lm75_readUint8Temp(void)
{
	lm75_setPointer(0x00);
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	0e 94 04 05 	call	0xa08	; 0xa08 <lm75_setPointer>

	I2CReadByte(lm75Address | 0x01);	//set r/w bit to 'read'	
     a1c:	80 91 e6 01 	lds	r24, 0x01E6
     a20:	81 60       	ori	r24, 0x01	; 1
     a22:	0e 94 f7 02 	call	0x5ee	; 0x5ee <I2CReadByte>
	lm75_setPointer(0x00);	
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	0e 94 04 05 	call	0xa08	; 0xa08 <lm75_setPointer>
	uint8_t MSB = I2CReadByte(lm75Address | 0x01);	//set r/w bit to 'read'
     a2c:	80 91 e6 01 	lds	r24, 0x01E6
     a30:	81 60       	ori	r24, 0x01	; 1
     a32:	0e 94 f7 02 	call	0x5ee	; 0x5ee <I2CReadByte>

	return MSB;
}
     a36:	08 95       	ret

00000a38 <lm75_getTemp>:
int lm75_getTemp()
{
	int currTemp;
	uint8_t tempRead = lm75_readUint8Temp();
     a38:	0e 94 0b 05 	call	0xa16	; 0xa16 <lm75_readUint8Temp>
	
	if((tempRead & 0x80))	//negative temperature
     a3c:	88 23       	and	r24, r24
     a3e:	34 f4       	brge	.+12     	; 0xa4c <lm75_getTemp+0x14>
	{
		currTemp = 128 - (tempRead & 0x7F);	//clear sign bit
     a40:	8f 77       	andi	r24, 0x7F	; 127
     a42:	28 2f       	mov	r18, r24
     a44:	30 e0       	ldi	r19, 0x00	; 0
		currTemp *= -1;	//set sign
     a46:	20 58       	subi	r18, 0x80	; 128
     a48:	30 40       	sbci	r19, 0x00	; 0
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <lm75_getTemp+0x18>
	}
	else	//positive temperature
	{
		currTemp = tempRead;
     a4c:	28 2f       	mov	r18, r24
     a4e:	30 e0       	ldi	r19, 0x00	; 0
	}

	return currTemp;	
}
     a50:	82 2f       	mov	r24, r18
     a52:	93 2f       	mov	r25, r19
     a54:	08 95       	ret

00000a56 <__vector_default>:
	}
	sei();
}

ISR(__vector_default)
{
     a56:	1f 92       	push	r1
     a58:	0f 92       	push	r0
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	0f 92       	push	r0
     a5e:	11 24       	eor	r1, r1
     a60:	2f 93       	push	r18
     a62:	3f 93       	push	r19
     a64:	4f 93       	push	r20
     a66:	5f 93       	push	r21
     a68:	6f 93       	push	r22
     a6a:	7f 93       	push	r23
     a6c:	8f 93       	push	r24
     a6e:	9f 93       	push	r25
     a70:	af 93       	push	r26
     a72:	bf 93       	push	r27
     a74:	ef 93       	push	r30
     a76:	ff 93       	push	r31
	#if DEGBUG
			sende(NL"ISR error");
     a78:	8a e3       	ldi	r24, 0x3A	; 58
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <sende>
     a80:	8f ef       	ldi	r24, 0xFF	; 255
     a82:	92 e5       	ldi	r25, 0x52	; 82
     a84:	a7 e0       	ldi	r26, 0x07	; 7
     a86:	81 50       	subi	r24, 0x01	; 1
     a88:	90 40       	sbci	r25, 0x00	; 0
     a8a:	a0 40       	sbci	r26, 0x00	; 0
     a8c:	e1 f7       	brne	.-8      	; 0xa86 <__vector_default+0x30>
     a8e:	00 c0       	rjmp	.+0      	; 0xa90 <__vector_default+0x3a>
     a90:	00 00       	nop
		#endif
	_delay_ms(300);
}
     a92:	ff 91       	pop	r31
     a94:	ef 91       	pop	r30
     a96:	bf 91       	pop	r27
     a98:	af 91       	pop	r26
     a9a:	9f 91       	pop	r25
     a9c:	8f 91       	pop	r24
     a9e:	7f 91       	pop	r23
     aa0:	6f 91       	pop	r22
     aa2:	5f 91       	pop	r21
     aa4:	4f 91       	pop	r20
     aa6:	3f 91       	pop	r19
     aa8:	2f 91       	pop	r18
     aaa:	0f 90       	pop	r0
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	0f 90       	pop	r0
     ab0:	1f 90       	pop	r1
     ab2:	18 95       	reti

00000ab4 <ActionHandle>:
/*                                                                      */
/************************************************************************/

void ActionHandle(uint8_t action)
{
	new_action = action;
     ab4:	80 93 dc 01 	sts	0x01DC, r24
}
     ab8:	08 95       	ret

00000aba <__vector_5>:
	_delay_ms(300);
	sei();
}	

ISR(PCINT2_vect)	//Interrupt from encoder and encoder-button
{
     aba:	1f 92       	push	r1
     abc:	0f 92       	push	r0
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	0f 92       	push	r0
     ac2:	11 24       	eor	r1, r1
     ac4:	2f 93       	push	r18
     ac6:	3f 93       	push	r19
     ac8:	4f 93       	push	r20
     aca:	5f 93       	push	r21
     acc:	6f 93       	push	r22
     ace:	7f 93       	push	r23
     ad0:	8f 93       	push	r24
     ad2:	9f 93       	push	r25
     ad4:	af 93       	push	r26
     ad6:	bf 93       	push	r27
     ad8:	ef 93       	push	r30
     ada:	ff 93       	push	r31
	cli();
     adc:	f8 94       	cli
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ade:	87 ee       	ldi	r24, 0xE7	; 231
     ae0:	93 e0       	ldi	r25, 0x03	; 3
     ae2:	01 97       	sbiw	r24, 0x01	; 1
     ae4:	f1 f7       	brne	.-4      	; 0xae2 <__vector_5+0x28>
     ae6:	00 c0       	rjmp	.+0      	; 0xae8 <__vector_5+0x2e>
     ae8:	00 00       	nop
	static char lastB = 0;

	_delay_us(500);
		
	
	if(!(ENCODER_PIN & (1<<ENCODER_BUTTON_NR)))//0 = active
     aea:	4f 99       	sbic	0x09, 7	; 9
     aec:	10 c0       	rjmp	.+32     	; 0xb0e <__vector_5+0x54>
	{
		// encoder button clicked
		ActionHandle(ACT_ENCODER_BUTTON);
     aee:	8c e0       	ldi	r24, 0x0C	; 12
     af0:	0e 94 5a 05 	call	0xab4	; 0xab4 <ActionHandle>
		#if DEGBUG
			sende(NL"enc button");
     af4:	86 e4       	ldi	r24, 0x46	; 70
     af6:	91 e0       	ldi	r25, 0x01	; 1
     af8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <sende>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	92 e5       	ldi	r25, 0x52	; 82
     b00:	a7 e0       	ldi	r26, 0x07	; 7
     b02:	81 50       	subi	r24, 0x01	; 1
     b04:	90 40       	sbci	r25, 0x00	; 0
     b06:	a0 40       	sbci	r26, 0x00	; 0
     b08:	e1 f7       	brne	.-8      	; 0xb02 <__vector_5+0x48>
     b0a:	00 c0       	rjmp	.+0      	; 0xb0c <__vector_5+0x52>
     b0c:	00 00       	nop
		#endif
		_delay_ms(300);
	}
	
	if(!(ENCODER_PIN & (1<<ENCODER_A_NR)))	//0 = active
     b0e:	4e 99       	sbic	0x09, 6	; 9
     b10:	07 c0       	rjmp	.+14     	; 0xb20 <__vector_5+0x66>
	{
		lastA = (lastA<<1);
     b12:	80 91 e5 01 	lds	r24, 0x01E5
     b16:	88 0f       	add	r24, r24
		lastA |= (1<<0);
     b18:	81 60       	ori	r24, 0x01	; 1
     b1a:	80 93 e5 01 	sts	0x01E5, r24
     b1e:	05 c0       	rjmp	.+10     	; 0xb2a <__vector_5+0x70>
	}
	else
	{
		lastA = (lastA<<1);
     b20:	80 91 e5 01 	lds	r24, 0x01E5
		lastA &= ~(1<<0);
     b24:	88 0f       	add	r24, r24
     b26:	80 93 e5 01 	sts	0x01E5, r24
	}
	
	if(!(ENCODER_PIN & (1<<ENCODER_B_NR)))
     b2a:	4d 99       	sbic	0x09, 5	; 9
     b2c:	07 c0       	rjmp	.+14     	; 0xb3c <__vector_5+0x82>
	{
		lastB = (lastB<<1);
     b2e:	80 91 e4 01 	lds	r24, 0x01E4
     b32:	88 0f       	add	r24, r24
		lastB |= (1<<0);
     b34:	81 60       	ori	r24, 0x01	; 1
     b36:	80 93 e4 01 	sts	0x01E4, r24
     b3a:	05 c0       	rjmp	.+10     	; 0xb46 <__vector_5+0x8c>
	}
	else
	{
		lastB = (lastB<<1);
     b3c:	80 91 e4 01 	lds	r24, 0x01E4
		lastB &= ~(1<<0);
     b40:	88 0f       	add	r24, r24
     b42:	80 93 e4 01 	sts	0x01E4, r24
	}
	
	if(((lastA & 0x03) == 3 && (lastB & 0x03) == 1)) //||((lastA & 0x03) == 0 && (lastB & 0x03) == 2) )
     b46:	80 91 e5 01 	lds	r24, 0x01E5
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	83 70       	andi	r24, 0x03	; 3
     b4e:	90 70       	andi	r25, 0x00	; 0
     b50:	83 30       	cpi	r24, 0x03	; 3
     b52:	91 05       	cpc	r25, r1
     b54:	69 f4       	brne	.+26     	; 0xb70 <__vector_5+0xb6>
     b56:	20 91 e4 01 	lds	r18, 0x01E4
     b5a:	23 70       	andi	r18, 0x03	; 3
     b5c:	21 30       	cpi	r18, 0x01	; 1
     b5e:	41 f4       	brne	.+16     	; 0xb70 <__vector_5+0xb6>
	{
		//encoder left turn
		ActionHandle(ACT_ENCODER_LEFT);
     b60:	8a e0       	ldi	r24, 0x0A	; 10
     b62:	0e 94 5a 05 	call	0xab4	; 0xab4 <ActionHandle>
		#if DEGBUG
			sende(NL"l");
     b66:	83 e5       	ldi	r24, 0x53	; 83
     b68:	91 e0       	ldi	r25, 0x01	; 1
     b6a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <sende>
     b6e:	0f c0       	rjmp	.+30     	; 0xb8e <__vector_5+0xd4>
		#endif
	}
	else if (((lastB & 0x03) == 3 && (lastA & 0x03) == 1))
     b70:	20 91 e4 01 	lds	r18, 0x01E4
     b74:	23 70       	andi	r18, 0x03	; 3
     b76:	23 30       	cpi	r18, 0x03	; 3
     b78:	51 f4       	brne	.+20     	; 0xb8e <__vector_5+0xd4>
     b7a:	81 30       	cpi	r24, 0x01	; 1
     b7c:	91 05       	cpc	r25, r1
     b7e:	39 f4       	brne	.+14     	; 0xb8e <__vector_5+0xd4>
	{
		//encoder right turn
		ActionHandle(ACT_ENCODER_RIGHT);
     b80:	8b e0       	ldi	r24, 0x0B	; 11
     b82:	0e 94 5a 05 	call	0xab4	; 0xab4 <ActionHandle>
		#if DEGBUG
			sende(NL"r");
     b86:	87 e5       	ldi	r24, 0x57	; 87
     b88:	91 e0       	ldi	r25, 0x01	; 1
     b8a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <sende>
		#endif
	}
	sei();
     b8e:	78 94       	sei
}
     b90:	ff 91       	pop	r31
     b92:	ef 91       	pop	r30
     b94:	bf 91       	pop	r27
     b96:	af 91       	pop	r26
     b98:	9f 91       	pop	r25
     b9a:	8f 91       	pop	r24
     b9c:	7f 91       	pop	r23
     b9e:	6f 91       	pop	r22
     ba0:	5f 91       	pop	r21
     ba2:	4f 91       	pop	r20
     ba4:	3f 91       	pop	r19
     ba6:	2f 91       	pop	r18
     ba8:	0f 90       	pop	r0
     baa:	0f be       	out	0x3f, r0	; 63
     bac:	0f 90       	pop	r0
     bae:	1f 90       	pop	r1
     bb0:	18 95       	reti

00000bb2 <__vector_4>:
	
	sei();
}

ISR(PCINT1_vect)	//Interrupt from Buttons
{
     bb2:	1f 92       	push	r1
     bb4:	0f 92       	push	r0
     bb6:	0f b6       	in	r0, 0x3f	; 63
     bb8:	0f 92       	push	r0
     bba:	11 24       	eor	r1, r1
     bbc:	2f 93       	push	r18
     bbe:	3f 93       	push	r19
     bc0:	4f 93       	push	r20
     bc2:	5f 93       	push	r21
     bc4:	6f 93       	push	r22
     bc6:	7f 93       	push	r23
     bc8:	8f 93       	push	r24
     bca:	9f 93       	push	r25
     bcc:	af 93       	push	r26
     bce:	bf 93       	push	r27
     bd0:	ef 93       	push	r30
     bd2:	ff 93       	push	r31
	cli();
     bd4:	f8 94       	cli
	if(!(BUTTON_PIN & (1<<BUTTON1_NR)))//0 = active
     bd6:	33 99       	sbic	0x06, 3	; 6
     bd8:	08 c0       	rjmp	.+16     	; 0xbea <__vector_4+0x38>
	{
		// button clicked
		ActionHandle(ACT_BUTTON1);
     bda:	8d e0       	ldi	r24, 0x0D	; 13
     bdc:	0e 94 5a 05 	call	0xab4	; 0xab4 <ActionHandle>
		#if DEGBUG
			sende(NL"B1");
     be0:	8b e5       	ldi	r24, 0x5B	; 91
     be2:	91 e0       	ldi	r25, 0x01	; 1
     be4:	0e 94 7f 02 	call	0x4fe	; 0x4fe <sende>
     be8:	13 c0       	rjmp	.+38     	; 0xc10 <__vector_4+0x5e>
		#endif
	}
	else if(!(BUTTON_PIN & (1<<BUTTON2_NR)))//0 = active
     bea:	32 99       	sbic	0x06, 2	; 6
     bec:	08 c0       	rjmp	.+16     	; 0xbfe <__vector_4+0x4c>
	{
		// button clicked
		ActionHandle(ACT_BUTTON2);
     bee:	8e e0       	ldi	r24, 0x0E	; 14
     bf0:	0e 94 5a 05 	call	0xab4	; 0xab4 <ActionHandle>
		#if DEGBUG
			sende(NL"B2");
     bf4:	80 e6       	ldi	r24, 0x60	; 96
     bf6:	91 e0       	ldi	r25, 0x01	; 1
     bf8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <sende>
     bfc:	09 c0       	rjmp	.+18     	; 0xc10 <__vector_4+0x5e>
		#endif
	}
	else if(!(BUTTON_PIN & (1<<BUTTON3_NR)))//0 = active
     bfe:	30 99       	sbic	0x06, 0	; 6
     c00:	07 c0       	rjmp	.+14     	; 0xc10 <__vector_4+0x5e>
	{
		// button clicked
		ActionHandle(ACT_BUTTON3);
     c02:	8f e0       	ldi	r24, 0x0F	; 15
     c04:	0e 94 5a 05 	call	0xab4	; 0xab4 <ActionHandle>
		#if DEGBUG
			sende(NL"B3");
     c08:	85 e6       	ldi	r24, 0x65	; 101
     c0a:	91 e0       	ldi	r25, 0x01	; 1
     c0c:	0e 94 7f 02 	call	0x4fe	; 0x4fe <sende>
     c10:	8f ef       	ldi	r24, 0xFF	; 255
     c12:	92 e5       	ldi	r25, 0x52	; 82
     c14:	a7 e0       	ldi	r26, 0x07	; 7
     c16:	81 50       	subi	r24, 0x01	; 1
     c18:	90 40       	sbci	r25, 0x00	; 0
     c1a:	a0 40       	sbci	r26, 0x00	; 0
     c1c:	e1 f7       	brne	.-8      	; 0xc16 <__vector_4+0x64>
     c1e:	00 c0       	rjmp	.+0      	; 0xc20 <__vector_4+0x6e>
     c20:	00 00       	nop
		#endif
	}
	
	_delay_ms(300);
	sei();
     c22:	78 94       	sei
}	
     c24:	ff 91       	pop	r31
     c26:	ef 91       	pop	r30
     c28:	bf 91       	pop	r27
     c2a:	af 91       	pop	r26
     c2c:	9f 91       	pop	r25
     c2e:	8f 91       	pop	r24
     c30:	7f 91       	pop	r23
     c32:	6f 91       	pop	r22
     c34:	5f 91       	pop	r21
     c36:	4f 91       	pop	r20
     c38:	3f 91       	pop	r19
     c3a:	2f 91       	pop	r18
     c3c:	0f 90       	pop	r0
     c3e:	0f be       	out	0x3f, r0	; 63
     c40:	0f 90       	pop	r0
     c42:	1f 90       	pop	r1
     c44:	18 95       	reti

00000c46 <menu_setTime>:

/************************************************************************/
/*                                                                      */
/************************************************************************/
void menu_setTime(uint8_t action)
{
     c46:	1f 93       	push	r17
     c48:	18 2f       	mov	r17, r24
	static uint8_t new_Month = 1;
	static uint8_t new_Year = 14; //year+2000 will be set	
	
	static uint8_t state = 0;

	if(state == 0)
     c4a:	80 91 e1 01 	lds	r24, 0x01E1
     c4e:	88 23       	and	r24, r24
     c50:	e1 f4       	brne	.+56     	; 0xc8a <menu_setTime+0x44>
	{
		  new_Hour = RTC_getTime_Hour();
     c52:	0e 94 d8 03 	call	0x7b0	; 0x7b0 <RTC_getTime_Hour>
     c56:	80 93 e3 01 	sts	0x01E3, r24
		  new_Min = RTC_getTime_Minute();
     c5a:	0e 94 df 03 	call	0x7be	; 0x7be <RTC_getTime_Minute>
     c5e:	80 93 e2 01 	sts	0x01E2, r24
		  new_WDay = RTC_getTime_WeekDay();
     c62:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <RTC_getTime_WeekDay>
     c66:	80 93 d8 01 	sts	0x01D8, r24
		  new_Day = RTC_getTime_Day();
     c6a:	0e 94 ca 03 	call	0x794	; 0x794 <RTC_getTime_Day>
     c6e:	80 93 d7 01 	sts	0x01D7, r24
		  new_Month = RTC_getTime_Month();
     c72:	0e 94 c3 03 	call	0x786	; 0x786 <RTC_getTime_Month>
     c76:	80 93 d6 01 	sts	0x01D6, r24
		  new_Year = RTC_getTime_Year(); //year+2000 will be set	
     c7a:	0e 94 bc 03 	call	0x778	; 0x778 <RTC_getTime_Year>
     c7e:	80 93 d5 01 	sts	0x01D5, r24
		  state = 1;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	80 93 e1 01 	sts	0x01E1, r24
     c88:	15 c0       	rjmp	.+42     	; 0xcb4 <menu_setTime+0x6e>
	}	  
	
	
	switch(state)
     c8a:	83 30       	cpi	r24, 0x03	; 3
     c8c:	09 f4       	brne	.+2      	; 0xc90 <menu_setTime+0x4a>
     c8e:	4c c0       	rjmp	.+152    	; 0xd28 <menu_setTime+0xe2>
     c90:	84 30       	cpi	r24, 0x04	; 4
     c92:	30 f4       	brcc	.+12     	; 0xca0 <menu_setTime+0x5a>
     c94:	81 30       	cpi	r24, 0x01	; 1
     c96:	71 f0       	breq	.+28     	; 0xcb4 <menu_setTime+0x6e>
     c98:	82 30       	cpi	r24, 0x02	; 2
     c9a:	09 f0       	breq	.+2      	; 0xc9e <menu_setTime+0x58>
     c9c:	c8 c0       	rjmp	.+400    	; 0xe2e <menu_setTime+0x1e8>
     c9e:	27 c0       	rjmp	.+78     	; 0xcee <menu_setTime+0xa8>
     ca0:	85 30       	cpi	r24, 0x05	; 5
     ca2:	09 f4       	brne	.+2      	; 0xca6 <menu_setTime+0x60>
     ca4:	7b c0       	rjmp	.+246    	; 0xd9c <menu_setTime+0x156>
     ca6:	85 30       	cpi	r24, 0x05	; 5
     ca8:	08 f4       	brcc	.+2      	; 0xcac <menu_setTime+0x66>
     caa:	5b c0       	rjmp	.+182    	; 0xd62 <menu_setTime+0x11c>
     cac:	86 30       	cpi	r24, 0x06	; 6
     cae:	09 f0       	breq	.+2      	; 0xcb2 <menu_setTime+0x6c>
     cb0:	be c0       	rjmp	.+380    	; 0xe2e <menu_setTime+0x1e8>
     cb2:	90 c0       	rjmp	.+288    	; 0xdd4 <menu_setTime+0x18e>
	{
		case STATE_SET_HOUR:
			if(action == ACT_ENCODER_RIGHT)
     cb4:	1b 30       	cpi	r17, 0x0B	; 11
     cb6:	31 f4       	brne	.+12     	; 0xcc4 <menu_setTime+0x7e>
			{
				new_Hour++;				
     cb8:	80 91 e3 01 	lds	r24, 0x01E3
     cbc:	8f 5f       	subi	r24, 0xFF	; 255
     cbe:	80 93 e3 01 	sts	0x01E3, r24
     cc2:	b5 c0       	rjmp	.+362    	; 0xe2e <menu_setTime+0x1e8>
			}
			else if(action == ACT_ENCODER_LEFT)
     cc4:	1a 30       	cpi	r17, 0x0A	; 10
     cc6:	61 f4       	brne	.+24     	; 0xce0 <menu_setTime+0x9a>
			{
				if(new_Hour == 0)
     cc8:	80 91 e3 01 	lds	r24, 0x01E3
     ccc:	88 23       	and	r24, r24
     cce:	21 f4       	brne	.+8      	; 0xcd8 <menu_setTime+0x92>
					new_Hour = 23;
     cd0:	87 e1       	ldi	r24, 0x17	; 23
     cd2:	80 93 e3 01 	sts	0x01E3, r24
     cd6:	b1 c0       	rjmp	.+354    	; 0xe3a <menu_setTime+0x1f4>
				else
				new_Hour--;
     cd8:	81 50       	subi	r24, 0x01	; 1
     cda:	80 93 e3 01 	sts	0x01E3, r24
     cde:	a7 c0       	rjmp	.+334    	; 0xe2e <menu_setTime+0x1e8>
			}
			else if(action == ACT_ENCODER_BUTTON)
     ce0:	1c 30       	cpi	r17, 0x0C	; 12
     ce2:	09 f0       	breq	.+2      	; 0xce6 <menu_setTime+0xa0>
     ce4:	a4 c0       	rjmp	.+328    	; 0xe2e <menu_setTime+0x1e8>
			{
				state ++;				
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
     ce8:	80 93 e1 01 	sts	0x01E1, r24
     cec:	a0 c0       	rjmp	.+320    	; 0xe2e <menu_setTime+0x1e8>
			}
		break;
		case STATE_SET_MINUTE:
			if(action == ACT_ENCODER_RIGHT)
     cee:	1b 30       	cpi	r17, 0x0B	; 11
     cf0:	31 f4       	brne	.+12     	; 0xcfe <menu_setTime+0xb8>
			{
				new_Min++;				
     cf2:	80 91 e2 01 	lds	r24, 0x01E2
     cf6:	8f 5f       	subi	r24, 0xFF	; 255
     cf8:	80 93 e2 01 	sts	0x01E2, r24
     cfc:	98 c0       	rjmp	.+304    	; 0xe2e <menu_setTime+0x1e8>
			}
			else if(action == ACT_ENCODER_LEFT)
     cfe:	1a 30       	cpi	r17, 0x0A	; 10
     d00:	61 f4       	brne	.+24     	; 0xd1a <menu_setTime+0xd4>
			{
				if(new_Min == 0)
     d02:	80 91 e2 01 	lds	r24, 0x01E2
     d06:	88 23       	and	r24, r24
     d08:	21 f4       	brne	.+8      	; 0xd12 <menu_setTime+0xcc>
					new_Min = 59;
     d0a:	8b e3       	ldi	r24, 0x3B	; 59
     d0c:	80 93 e2 01 	sts	0x01E2, r24
     d10:	8e c0       	rjmp	.+284    	; 0xe2e <menu_setTime+0x1e8>
				else
					new_Min--;
     d12:	81 50       	subi	r24, 0x01	; 1
     d14:	80 93 e2 01 	sts	0x01E2, r24
     d18:	8a c0       	rjmp	.+276    	; 0xe2e <menu_setTime+0x1e8>
			}
			else if(action == ACT_ENCODER_BUTTON)
     d1a:	1c 30       	cpi	r17, 0x0C	; 12
     d1c:	09 f0       	breq	.+2      	; 0xd20 <menu_setTime+0xda>
     d1e:	87 c0       	rjmp	.+270    	; 0xe2e <menu_setTime+0x1e8>
			{
				state ++;				
     d20:	8f 5f       	subi	r24, 0xFF	; 255
     d22:	80 93 e1 01 	sts	0x01E1, r24
     d26:	83 c0       	rjmp	.+262    	; 0xe2e <menu_setTime+0x1e8>
			}
		break;
		case STATE_SET_WEEKDAY:
			if(action == ACT_ENCODER_RIGHT)
     d28:	1b 30       	cpi	r17, 0x0B	; 11
     d2a:	31 f4       	brne	.+12     	; 0xd38 <menu_setTime+0xf2>
			{
				new_WDay++;				
     d2c:	80 91 d8 01 	lds	r24, 0x01D8
     d30:	8f 5f       	subi	r24, 0xFF	; 255
     d32:	80 93 d8 01 	sts	0x01D8, r24
     d36:	7b c0       	rjmp	.+246    	; 0xe2e <menu_setTime+0x1e8>
			}
			else if(action == ACT_ENCODER_LEFT)
     d38:	1a 30       	cpi	r17, 0x0A	; 10
     d3a:	61 f4       	brne	.+24     	; 0xd54 <menu_setTime+0x10e>
			{
				if(new_WDay == 1)
     d3c:	80 91 d8 01 	lds	r24, 0x01D8
     d40:	81 30       	cpi	r24, 0x01	; 1
     d42:	21 f4       	brne	.+8      	; 0xd4c <menu_setTime+0x106>
					new_WDay = 7;
     d44:	87 e0       	ldi	r24, 0x07	; 7
     d46:	80 93 d8 01 	sts	0x01D8, r24
     d4a:	71 c0       	rjmp	.+226    	; 0xe2e <menu_setTime+0x1e8>
				else
					new_WDay--;
     d4c:	81 50       	subi	r24, 0x01	; 1
     d4e:	80 93 d8 01 	sts	0x01D8, r24
     d52:	6d c0       	rjmp	.+218    	; 0xe2e <menu_setTime+0x1e8>
			}
			else if(action == ACT_ENCODER_BUTTON)
     d54:	1c 30       	cpi	r17, 0x0C	; 12
     d56:	09 f0       	breq	.+2      	; 0xd5a <menu_setTime+0x114>
     d58:	6a c0       	rjmp	.+212    	; 0xe2e <menu_setTime+0x1e8>
			{
				state ++;				
     d5a:	8f 5f       	subi	r24, 0xFF	; 255
     d5c:	80 93 e1 01 	sts	0x01E1, r24
     d60:	66 c0       	rjmp	.+204    	; 0xe2e <menu_setTime+0x1e8>
			}
		break;
		case STATE_SET_DAY:
			if(action == ACT_ENCODER_RIGHT)
     d62:	1b 30       	cpi	r17, 0x0B	; 11
     d64:	31 f4       	brne	.+12     	; 0xd72 <menu_setTime+0x12c>
			{
				new_Day++;				
     d66:	80 91 d7 01 	lds	r24, 0x01D7
     d6a:	8f 5f       	subi	r24, 0xFF	; 255
     d6c:	80 93 d7 01 	sts	0x01D7, r24
     d70:	5e c0       	rjmp	.+188    	; 0xe2e <menu_setTime+0x1e8>
			}
			else if(action == ACT_ENCODER_LEFT)
     d72:	1a 30       	cpi	r17, 0x0A	; 10
     d74:	61 f4       	brne	.+24     	; 0xd8e <menu_setTime+0x148>
			{
				if(new_Day == 0)
     d76:	80 91 d7 01 	lds	r24, 0x01D7
     d7a:	88 23       	and	r24, r24
     d7c:	21 f4       	brne	.+8      	; 0xd86 <menu_setTime+0x140>
					new_Day = 32;
     d7e:	80 e2       	ldi	r24, 0x20	; 32
     d80:	80 93 d7 01 	sts	0x01D7, r24
     d84:	54 c0       	rjmp	.+168    	; 0xe2e <menu_setTime+0x1e8>
				else
					new_Day--;
     d86:	81 50       	subi	r24, 0x01	; 1
     d88:	80 93 d7 01 	sts	0x01D7, r24
     d8c:	50 c0       	rjmp	.+160    	; 0xe2e <menu_setTime+0x1e8>
			}
			else if(action == ACT_ENCODER_BUTTON)
     d8e:	1c 30       	cpi	r17, 0x0C	; 12
     d90:	09 f0       	breq	.+2      	; 0xd94 <menu_setTime+0x14e>
     d92:	4d c0       	rjmp	.+154    	; 0xe2e <menu_setTime+0x1e8>
			{
				state ++;				
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	80 93 e1 01 	sts	0x01E1, r24
     d9a:	49 c0       	rjmp	.+146    	; 0xe2e <menu_setTime+0x1e8>
			}
		break;
		case STATE_SET_MONTH:
			if(action == ACT_ENCODER_RIGHT)
     d9c:	1b 30       	cpi	r17, 0x0B	; 11
     d9e:	31 f4       	brne	.+12     	; 0xdac <menu_setTime+0x166>
			{
				new_Month++;				
     da0:	80 91 d6 01 	lds	r24, 0x01D6
     da4:	8f 5f       	subi	r24, 0xFF	; 255
     da6:	80 93 d6 01 	sts	0x01D6, r24
     daa:	41 c0       	rjmp	.+130    	; 0xe2e <menu_setTime+0x1e8>
			}
			else if(action == ACT_ENCODER_LEFT)
     dac:	1a 30       	cpi	r17, 0x0A	; 10
     dae:	61 f4       	brne	.+24     	; 0xdc8 <menu_setTime+0x182>
			{
				if(new_Month == 1)
     db0:	80 91 d6 01 	lds	r24, 0x01D6
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	21 f4       	brne	.+8      	; 0xdc0 <menu_setTime+0x17a>
					new_Month = 12;
     db8:	8c e0       	ldi	r24, 0x0C	; 12
     dba:	80 93 d6 01 	sts	0x01D6, r24
     dbe:	37 c0       	rjmp	.+110    	; 0xe2e <menu_setTime+0x1e8>
				else
					new_Month--;
     dc0:	81 50       	subi	r24, 0x01	; 1
     dc2:	80 93 d6 01 	sts	0x01D6, r24
     dc6:	33 c0       	rjmp	.+102    	; 0xe2e <menu_setTime+0x1e8>
			}
			else if(action == ACT_ENCODER_BUTTON)
     dc8:	1c 30       	cpi	r17, 0x0C	; 12
     dca:	89 f5       	brne	.+98     	; 0xe2e <menu_setTime+0x1e8>
			{
				state ++;				
     dcc:	8f 5f       	subi	r24, 0xFF	; 255
     dce:	80 93 e1 01 	sts	0x01E1, r24
     dd2:	2d c0       	rjmp	.+90     	; 0xe2e <menu_setTime+0x1e8>
			}
		break;
		case STATE_SET_YEAR:
			if(action == ACT_ENCODER_RIGHT)
     dd4:	1b 30       	cpi	r17, 0x0B	; 11
     dd6:	31 f4       	brne	.+12     	; 0xde4 <menu_setTime+0x19e>
			{
				new_Year++;				
     dd8:	80 91 d5 01 	lds	r24, 0x01D5
     ddc:	8f 5f       	subi	r24, 0xFF	; 255
     dde:	80 93 d5 01 	sts	0x01D5, r24
     de2:	25 c0       	rjmp	.+74     	; 0xe2e <menu_setTime+0x1e8>
			}
			else if(action == ACT_ENCODER_LEFT)
     de4:	1a 30       	cpi	r17, 0x0A	; 10
     de6:	31 f4       	brne	.+12     	; 0xdf4 <menu_setTime+0x1ae>
			{
				new_Year--;
     de8:	80 91 d5 01 	lds	r24, 0x01D5
     dec:	81 50       	subi	r24, 0x01	; 1
     dee:	80 93 d5 01 	sts	0x01D5, r24
     df2:	1d c0       	rjmp	.+58     	; 0xe2e <menu_setTime+0x1e8>
			}
			else if(action == ACT_ENCODER_BUTTON)
     df4:	1c 30       	cpi	r17, 0x0C	; 12
     df6:	d9 f4       	brne	.+54     	; 0xe2e <menu_setTime+0x1e8>
			{
				//state = STATE_INPUT_OVER;		
				current_screen = SCREEN_HOME;		
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	80 93 db 01 	sts	0x01DB, r24
				state = 0;		
     dfe:	10 92 e1 01 	sts	0x01E1, r1
				
				RTC_setTime(new_Hour,new_Min,0);
     e02:	80 91 e3 01 	lds	r24, 0x01E3
     e06:	60 91 e2 01 	lds	r22, 0x01E2
     e0a:	40 e0       	ldi	r20, 0x00	; 0
     e0c:	0e 94 8b 04 	call	0x916	; 0x916 <RTC_setTime>
				RTC_setDate(new_Day,new_Month,new_Year);
     e10:	80 91 d7 01 	lds	r24, 0x01D7
     e14:	60 91 d6 01 	lds	r22, 0x01D6
     e18:	40 91 d5 01 	lds	r20, 0x01D5
     e1c:	0e 94 70 04 	call	0x8e0	; 0x8e0 <RTC_setDate>
				RTC_setDay(new_WDay);
     e20:	80 91 d8 01 	lds	r24, 0x01D8
     e24:	0e 94 62 04 	call	0x8c4	; 0x8c4 <RTC_setDay>
				RTC_start(TRUE);
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	0e 94 3f 04 	call	0x87e	; 0x87e <RTC_start>
			 
			
		break;
	}
	
	if(new_Hour > 23)
     e2e:	80 91 e3 01 	lds	r24, 0x01E3
     e32:	88 31       	cpi	r24, 0x18	; 24
     e34:	10 f0       	brcs	.+4      	; 0xe3a <menu_setTime+0x1f4>
		new_Hour = 0;
     e36:	10 92 e3 01 	sts	0x01E3, r1
	if(new_Min > 59)
     e3a:	80 91 e2 01 	lds	r24, 0x01E2
     e3e:	8c 33       	cpi	r24, 0x3C	; 60
     e40:	10 f0       	brcs	.+4      	; 0xe46 <menu_setTime+0x200>
		new_Min = 0;
     e42:	10 92 e2 01 	sts	0x01E2, r1
	if(new_WDay > 7)
     e46:	80 91 d8 01 	lds	r24, 0x01D8
     e4a:	88 30       	cpi	r24, 0x08	; 8
     e4c:	18 f0       	brcs	.+6      	; 0xe54 <menu_setTime+0x20e>
		new_WDay = 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 d8 01 	sts	0x01D8, r24
	if(new_Day > 32)
     e54:	80 91 d7 01 	lds	r24, 0x01D7
     e58:	81 32       	cpi	r24, 0x21	; 33
     e5a:	18 f0       	brcs	.+6      	; 0xe62 <menu_setTime+0x21c>
		new_Day = 1;
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	80 93 d7 01 	sts	0x01D7, r24
	if(new_Month > 12)
     e62:	80 91 d6 01 	lds	r24, 0x01D6
     e66:	8d 30       	cpi	r24, 0x0D	; 13
     e68:	18 f0       	brcs	.+6      	; 0xe70 <menu_setTime+0x22a>
		new_Month = 1;
     e6a:	81 e0       	ldi	r24, 0x01	; 1
     e6c:	80 93 d6 01 	sts	0x01D6, r24
				
	lcd_clear();
     e70:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_clear>
	lcd_string("set time   ");
     e74:	8a e6       	ldi	r24, 0x6A	; 106
     e76:	91 e0       	ldi	r25, 0x01	; 1
     e78:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	if(new_Hour<10)
     e7c:	80 91 e3 01 	lds	r24, 0x01E3
     e80:	8a 30       	cpi	r24, 0x0A	; 10
     e82:	20 f4       	brcc	.+8      	; 0xe8c <menu_setTime+0x246>
		lcd_string("0");
     e84:	84 e2       	ldi	r24, 0x24	; 36
     e86:	91 e0       	ldi	r25, 0x01	; 1
     e88:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	lcd_int(new_Hour);
     e8c:	80 91 e3 01 	lds	r24, 0x01E3
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	0e 94 09 01 	call	0x212	; 0x212 <lcd_int>
	lcd_string(":");
     e96:	86 e2       	ldi	r24, 0x26	; 38
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	if(new_Min<10)
     e9e:	80 91 e2 01 	lds	r24, 0x01E2
     ea2:	8a 30       	cpi	r24, 0x0A	; 10
     ea4:	20 f4       	brcc	.+8      	; 0xeae <menu_setTime+0x268>
		lcd_string("0");
     ea6:	84 e2       	ldi	r24, 0x24	; 36
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	lcd_int(new_Min);
     eae:	80 91 e2 01 	lds	r24, 0x01E2
     eb2:	90 e0       	ldi	r25, 0x00	; 0
     eb4:	0e 94 09 01 	call	0x212	; 0x212 <lcd_int>
	lcd_setcursor(0,2); //go to 2. line	
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	62 e0       	ldi	r22, 0x02	; 2
     ebc:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_setcursor>
	lcd_sendWeekday(new_WDay);
     ec0:	80 91 d8 01 	lds	r24, 0x01D8
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 6f 01 	call	0x2de	; 0x2de <lcd_sendWeekday>
	lcd_string("    ");	
     eca:	86 e7       	ldi	r24, 0x76	; 118
     ecc:	91 e0       	ldi	r25, 0x01	; 1
     ece:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	if(new_Day<10)
     ed2:	80 91 d7 01 	lds	r24, 0x01D7
     ed6:	8a 30       	cpi	r24, 0x0A	; 10
     ed8:	20 f4       	brcc	.+8      	; 0xee2 <menu_setTime+0x29c>
		lcd_string("0");
     eda:	84 e2       	ldi	r24, 0x24	; 36
     edc:	91 e0       	ldi	r25, 0x01	; 1
     ede:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	lcd_int(new_Day);
     ee2:	80 91 d7 01 	lds	r24, 0x01D7
     ee6:	90 e0       	ldi	r25, 0x00	; 0
     ee8:	0e 94 09 01 	call	0x212	; 0x212 <lcd_int>
	lcd_string(".");
     eec:	8b e7       	ldi	r24, 0x7B	; 123
     eee:	91 e0       	ldi	r25, 0x01	; 1
     ef0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	if(new_Month<10)
     ef4:	80 91 d6 01 	lds	r24, 0x01D6
     ef8:	8a 30       	cpi	r24, 0x0A	; 10
     efa:	20 f4       	brcc	.+8      	; 0xf04 <menu_setTime+0x2be>
		lcd_string("0");
     efc:	84 e2       	ldi	r24, 0x24	; 36
     efe:	91 e0       	ldi	r25, 0x01	; 1
     f00:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	lcd_int(new_Month);
     f04:	80 91 d6 01 	lds	r24, 0x01D6
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	0e 94 09 01 	call	0x212	; 0x212 <lcd_int>
	lcd_string(".");
     f0e:	8b e7       	ldi	r24, 0x7B	; 123
     f10:	91 e0       	ldi	r25, 0x01	; 1
     f12:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
	lcd_int(new_Year+2000);
     f16:	80 91 d5 01 	lds	r24, 0x01D5
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	80 53       	subi	r24, 0x30	; 48
     f1e:	98 4f       	sbci	r25, 0xF8	; 248
     f20:	0e 94 09 01 	call	0x212	; 0x212 <lcd_int>

}
     f24:	1f 91       	pop	r17
     f26:	08 95       	ret

00000f28 <RTC_start_min_interrupt>:


void RTC_start_min_interrupt()
{	
	//1 second
	SRAMWriteByte(0x0A,0x01);	
     f28:	8a e0       	ldi	r24, 0x0A	; 10
     f2a:	61 e0       	ldi	r22, 0x01	; 1
     f2c:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	
	//set to Second Match (1s)
	uint8_t configByte = SRAMReadByte(0x0D);
     f30:	8d e0       	ldi	r24, 0x0D	; 13
     f32:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
	configByte &= ~(1<<4);
	configByte &= ~(1<<5);
	configByte &= ~(1<<5);
     f36:	68 2f       	mov	r22, r24
     f38:	6f 7c       	andi	r22, 0xCF	; 207
	SRAMWriteByte(0x0D,configByte);	
     f3a:	8d e0       	ldi	r24, 0x0D	; 13
     f3c:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	
	//enable alarm0
	configByte = SRAMReadByte(0x07);
     f40:	87 e0       	ldi	r24, 0x07	; 7
     f42:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
	configByte |= (1<<4);
     f46:	68 2f       	mov	r22, r24
     f48:	60 61       	ori	r22, 0x10	; 16
	SRAMWriteByte(0x07,configByte);	
     f4a:	87 e0       	ldi	r24, 0x07	; 7
     f4c:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
}
     f50:	08 95       	ret

00000f52 <check_alarms>:

/************************************************************************/
/*                                                                      */
/************************************************************************/
uint8_t check_alarms(uint8_t minute, uint8_t hour, uint8_t day)
{
     f52:	0f 93       	push	r16
     f54:	1f 93       	push	r17
     f56:	08 2f       	mov	r16, r24
     f58:	16 2f       	mov	r17, r22
	sende(NL"check alarms "NL);
     f5a:	8d e7       	ldi	r24, 0x7D	; 125
     f5c:	91 e0       	ldi	r25, 0x01	; 1
     f5e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <sende>
	uint8_t alarmMax = 1; //number of alarms
	
	for(int i=0;i<alarmMax;i++)
	{
		//check start condition
		if ( (alarms[i][1] == hour) && (alarms[i][2] == minute) && (alarms[i][0]) ) //&& check_day(alarms[i][5],day) 
     f62:	80 91 e9 01 	lds	r24, 0x01E9
     f66:	81 17       	cp	r24, r17
     f68:	51 f4       	brne	.+20     	; 0xf7e <check_alarms+0x2c>
     f6a:	80 91 ea 01 	lds	r24, 0x01EA
     f6e:	80 17       	cp	r24, r16
     f70:	31 f4       	brne	.+12     	; 0xf7e <check_alarms+0x2c>
     f72:	80 91 e8 01 	lds	r24, 0x01E8
     f76:	88 23       	and	r24, r24
     f78:	11 f0       	breq	.+4      	; 0xf7e <check_alarms+0x2c>
		{
			//set alarm ON!
			alarm_on();
     f7a:	0e 94 67 01 	call	0x2ce	; 0x2ce <alarm_on>
		{
			//no match
		}
		
		//check stop condition
		if ( (alarms[i][3] == hour) && (alarms[i][4] == minute))
     f7e:	80 91 eb 01 	lds	r24, 0x01EB
     f82:	81 17       	cp	r24, r17
     f84:	31 f4       	brne	.+12     	; 0xf92 <check_alarms+0x40>
     f86:	80 91 ec 01 	lds	r24, 0x01EC
     f8a:	80 17       	cp	r24, r16
     f8c:	11 f4       	brne	.+4      	; 0xf92 <check_alarms+0x40>
		{
			//set alarm OFF!
			alarm_off();
     f8e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <alarm_off>
			//no match
		}
	}
	
	return TRUE;
}
     f92:	81 e0       	ldi	r24, 0x01	; 1
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <__vector_2>:
/************************************************************************/
/*                                ISR                                   */
/************************************************************************/

ISR(INT1_vect)	//Interrupt from RTC every minute
{
     f9a:	1f 92       	push	r1
     f9c:	0f 92       	push	r0
     f9e:	0f b6       	in	r0, 0x3f	; 63
     fa0:	0f 92       	push	r0
     fa2:	11 24       	eor	r1, r1
     fa4:	0f 93       	push	r16
     fa6:	1f 93       	push	r17
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
	cli();
     fc0:	f8 94       	cli
	
	/*	reset ALM0IF bit	*/
	uint8_t configByte = SRAMReadByte(0x0D);
     fc2:	8d e0       	ldi	r24, 0x0D	; 13
     fc4:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
	configByte &= ~(1<<ALM0IF);	
     fc8:	68 2f       	mov	r22, r24
     fca:	67 7f       	andi	r22, 0xF7	; 247
	SRAMWriteByte(0x0D,configByte);
     fcc:	8d e0       	ldi	r24, 0x0D	; 13
     fce:	0e 94 ed 03 	call	0x7da	; 0x7da <SRAMWriteByte>
	
	uint8_t currMin = decodeBCD(SRAMReadByte(ADD_time_min),0x7F);
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
     fd8:	6f e7       	ldi	r22, 0x7F	; 127
     fda:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
     fde:	08 2f       	mov	r16, r24
	uint8_t currHour = decodeBCD(SRAMReadByte(ADD_time_hour),0x3F);
     fe0:	82 e0       	ldi	r24, 0x02	; 2
     fe2:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
     fe6:	6f e3       	ldi	r22, 0x3F	; 63
     fe8:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
     fec:	18 2f       	mov	r17, r24
	uint8_t currDay = decodeBCD(SRAMReadByte(ADD_time_day),0x07);
     fee:	83 e0       	ldi	r24, 0x03	; 3
     ff0:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
     ff4:	67 e0       	ldi	r22, 0x07	; 7
     ff6:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
     ffa:	48 2f       	mov	r20, r24
	
	check_alarms(currMin,currHour,currDay);
     ffc:	80 2f       	mov	r24, r16
     ffe:	61 2f       	mov	r22, r17
    1000:	0e 94 a9 07 	call	0xf52	; 0xf52 <check_alarms>
	
	ActionHandle(ACT_MINUTE_START);
    1004:	84 e0       	ldi	r24, 0x04	; 4
    1006:	0e 94 5a 05 	call	0xab4	; 0xab4 <ActionHandle>
	
	sei();
    100a:	78 94       	sei
}
    100c:	ff 91       	pop	r31
    100e:	ef 91       	pop	r30
    1010:	bf 91       	pop	r27
    1012:	af 91       	pop	r26
    1014:	9f 91       	pop	r25
    1016:	8f 91       	pop	r24
    1018:	7f 91       	pop	r23
    101a:	6f 91       	pop	r22
    101c:	5f 91       	pop	r21
    101e:	4f 91       	pop	r20
    1020:	3f 91       	pop	r19
    1022:	2f 91       	pop	r18
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	0f 90       	pop	r0
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	0f 90       	pop	r0
    102e:	1f 90       	pop	r1
    1030:	18 95       	reti

00001032 <DisplayWriteCurrDate>:

/************************************************************************/
/*                                                                      */
/************************************************************************/
void DisplayWriteCurrDate(void)
{
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
	uint8_t minute,hour,date,month,day;
	//uint8_t second, year;
	
	//read data
		//second = decodeBCD(SRAMReadByte(ADD_time_sec),0x7F);
		minute = decodeBCD(SRAMReadByte(ADD_time_min),0x7F);
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
    103e:	6f e7       	ldi	r22, 0x7F	; 127
    1040:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
    1044:	08 2f       	mov	r16, r24
		hour = decodeBCD(SRAMReadByte(ADD_time_hour),0x3F);
    1046:	82 e0       	ldi	r24, 0x02	; 2
    1048:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
    104c:	6f e3       	ldi	r22, 0x3F	; 63
    104e:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
    1052:	f8 2e       	mov	r15, r24
		
		date = decodeBCD(SRAMReadByte(ADD_time_date),0x3F);
    1054:	84 e0       	ldi	r24, 0x04	; 4
    1056:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
		month = decodeBCD(SRAMReadByte(ADD_time_month),0x1F);
    105a:	85 e0       	ldi	r24, 0x05	; 5
    105c:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
		//year = decodeBCD(SRAMReadByte(ADD_time_year),0xFF);
		day = decodeBCD(SRAMReadByte(ADD_time_day),0x07);
    1060:	83 e0       	ldi	r24, 0x03	; 3
    1062:	0e 94 4f 03 	call	0x69e	; 0x69e <SRAMReadByte>
    1066:	67 e0       	ldi	r22, 0x07	; 7
    1068:	0e 94 32 03 	call	0x664	; 0x664 <decodeBCD>
    106c:	18 2f       	mov	r17, r24
		
		currentTime[0] = hour;
    106e:	f0 92 ee 01 	sts	0x01EE, r15
    1072:	10 92 ef 01 	sts	0x01EF, r1
		currentTime[1] = minute;
    1076:	00 93 f0 01 	sts	0x01F0, r16
    107a:	10 92 f1 01 	sts	0x01F1, r1
	//clear display
		lcd_clear();
    107e:	0e 94 86 00 	call	0x10c	; 0x10c <lcd_clear>
	//display data 
		switch(day)
    1082:	14 30       	cpi	r17, 0x04	; 4
    1084:	f9 f0       	breq	.+62     	; 0x10c4 <DisplayWriteCurrDate+0x92>
    1086:	15 30       	cpi	r17, 0x05	; 5
    1088:	38 f4       	brcc	.+14     	; 0x1098 <DisplayWriteCurrDate+0x66>
    108a:	12 30       	cpi	r17, 0x02	; 2
    108c:	89 f0       	breq	.+34     	; 0x10b0 <DisplayWriteCurrDate+0x7e>
    108e:	13 30       	cpi	r17, 0x03	; 3
    1090:	a0 f4       	brcc	.+40     	; 0x10ba <DisplayWriteCurrDate+0x88>
    1092:	11 30       	cpi	r17, 0x01	; 1
    1094:	59 f5       	brne	.+86     	; 0x10ec <DisplayWriteCurrDate+0xba>
    1096:	07 c0       	rjmp	.+14     	; 0x10a6 <DisplayWriteCurrDate+0x74>
    1098:	16 30       	cpi	r17, 0x06	; 6
    109a:	f1 f0       	breq	.+60     	; 0x10d8 <DisplayWriteCurrDate+0xa6>
    109c:	16 30       	cpi	r17, 0x06	; 6
    109e:	b8 f0       	brcs	.+46     	; 0x10ce <DisplayWriteCurrDate+0x9c>
    10a0:	17 30       	cpi	r17, 0x07	; 7
    10a2:	21 f5       	brne	.+72     	; 0x10ec <DisplayWriteCurrDate+0xba>
    10a4:	1e c0       	rjmp	.+60     	; 0x10e2 <DisplayWriteCurrDate+0xb0>
		{
			case 1:
				lcd_string("Mo");
    10a6:	80 e0       	ldi	r24, 0x00	; 0
    10a8:	91 e0       	ldi	r25, 0x01	; 1
    10aa:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
			break;
    10ae:	22 c0       	rjmp	.+68     	; 0x10f4 <DisplayWriteCurrDate+0xc2>
			case 2:
				lcd_string("Di");
    10b0:	83 e0       	ldi	r24, 0x03	; 3
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
			break;
    10b8:	1d c0       	rjmp	.+58     	; 0x10f4 <DisplayWriteCurrDate+0xc2>
			case 3:
				lcd_string("Mi");
    10ba:	86 e0       	ldi	r24, 0x06	; 6
    10bc:	91 e0       	ldi	r25, 0x01	; 1
    10be:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
			break;
    10c2:	18 c0       	rjmp	.+48     	; 0x10f4 <DisplayWriteCurrDate+0xc2>
			case 4:
				lcd_string("Do");
    10c4:	89 e0       	ldi	r24, 0x09	; 9
    10c6:	91 e0       	ldi	r25, 0x01	; 1
    10c8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
			break;
    10cc:	13 c0       	rjmp	.+38     	; 0x10f4 <DisplayWriteCurrDate+0xc2>
			case 5:
				lcd_string("Fr");
    10ce:	8c e0       	ldi	r24, 0x0C	; 12
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
			break;
    10d6:	0e c0       	rjmp	.+28     	; 0x10f4 <DisplayWriteCurrDate+0xc2>
			case 6:
				lcd_string("Sa");
    10d8:	8f e0       	ldi	r24, 0x0F	; 15
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
			break;
    10e0:	09 c0       	rjmp	.+18     	; 0x10f4 <DisplayWriteCurrDate+0xc2>
			case 7:
				lcd_string("So");
    10e2:	82 e1       	ldi	r24, 0x12	; 18
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
			break;
    10ea:	04 c0       	rjmp	.+8      	; 0x10f4 <DisplayWriteCurrDate+0xc2>
			default:
				lcd_string("er");
    10ec:	85 e1       	ldi	r24, 0x15	; 21
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
			break;
		}
		lcd_string(" ");
    10f4:	8f e8       	ldi	r24, 0x8F	; 143
    10f6:	91 e0       	ldi	r25, 0x01	; 1
    10f8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		
		if(hour<10) lcd_string("0");
    10fc:	8f 2d       	mov	r24, r15
    10fe:	8a 30       	cpi	r24, 0x0A	; 10
    1100:	20 f4       	brcc	.+8      	; 0x110a <DisplayWriteCurrDate+0xd8>
    1102:	84 e2       	ldi	r24, 0x24	; 36
    1104:	91 e0       	ldi	r25, 0x01	; 1
    1106:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		lcd_int(hour);
    110a:	8f 2d       	mov	r24, r15
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	0e 94 09 01 	call	0x212	; 0x212 <lcd_int>
		lcd_string(":");
    1112:	86 e2       	ldi	r24, 0x26	; 38
    1114:	91 e0       	ldi	r25, 0x01	; 1
    1116:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		if(minute<10) lcd_string("0");
    111a:	0a 30       	cpi	r16, 0x0A	; 10
    111c:	20 f4       	brcc	.+8      	; 0x1126 <DisplayWriteCurrDate+0xf4>
    111e:	84 e2       	ldi	r24, 0x24	; 36
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		lcd_int(minute);
    1126:	80 2f       	mov	r24, r16
    1128:	90 e0       	ldi	r25, 0x00	; 0
    112a:	0e 94 09 01 	call	0x212	; 0x212 <lcd_int>
		
		lcd_string("  ");	
    112e:	81 e9       	ldi	r24, 0x91	; 145
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		lcd_string(" ");
		lcd_int(lm75_getTemp());
		lcd_data(0b11011111); //°
		lcd_string("C");
	*/
		lcd_setcursor(0,2);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	62 e0       	ldi	r22, 0x02	; 2
    113a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_setcursor>
		lcd_string("Alarm: ");
    113e:	84 e9       	ldi	r24, 0x94	; 148
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		
		lcd_int(alarms[0][1]);
    1146:	80 91 e9 01 	lds	r24, 0x01E9
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	0e 94 09 01 	call	0x212	; 0x212 <lcd_int>
		lcd_string(":");
    1150:	86 e2       	ldi	r24, 0x26	; 38
    1152:	91 e0       	ldi	r25, 0x01	; 1
    1154:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
		lcd_int(alarms[0][2]);
    1158:	80 91 ea 01 	lds	r24, 0x01EA
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	0e 94 09 01 	call	0x212	; 0x212 <lcd_int>
		
		if(alarms[0][0])
    1162:	80 91 e8 01 	lds	r24, 0x01E8
    1166:	88 23       	and	r24, r24
    1168:	29 f0       	breq	.+10     	; 0x1174 <DisplayWriteCurrDate+0x142>
			lcd_string("  ON");
    116a:	8c e9       	ldi	r24, 0x9C	; 156
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
    1172:	04 c0       	rjmp	.+8      	; 0x117c <DisplayWriteCurrDate+0x14a>
		else
			lcd_string(" OFF");
    1174:	81 ea       	ldi	r24, 0xA1	; 161
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <lcd_string>
// 		lcd_string(".");
// 		if(month<10) lcd_string("0");
// 		lcd_int(month);
		

    117c:	1f 91       	pop	r17
    117e:	0f 91       	pop	r16
    1180:	ff 90       	pop	r15
    1182:	08 95       	ret

00001184 <ActionSwitch>:
{
	new_action = action;
}

void ActionSwitch(uint8_t action)
{
    1184:	1f 93       	push	r17
    1186:	18 2f       	mov	r17, r24
	
	if(action == ACT_MINUTE_START) //aktualisiere LCD
    1188:	84 30       	cpi	r24, 0x04	; 4
    118a:	19 f4       	brne	.+6      	; 0x1192 <ActionSwitch+0xe>
	{
		DisplayWriteCurrDate();
    118c:	0e 94 19 08 	call	0x1032	; 0x1032 <DisplayWriteCurrDate>
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <ActionSwitch+0x14>
	}	
	else
	{
		//user action or alarm
		userAction = 100;
    1192:	84 e6       	ldi	r24, 0x64	; 100
    1194:	80 93 d2 01 	sts	0x01D2, r24
	}
	
	switch(current_screen)
    1198:	80 91 db 01 	lds	r24, 0x01DB
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	59 f0       	breq	.+22     	; 0x11b6 <ActionSwitch+0x32>
    11a0:	81 30       	cpi	r24, 0x01	; 1
    11a2:	28 f0       	brcs	.+10     	; 0x11ae <ActionSwitch+0x2a>
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	e1 f0       	breq	.+56     	; 0x11e0 <ActionSwitch+0x5c>
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	19 f5       	brne	.+70     	; 0x11f2 <ActionSwitch+0x6e>
    11ac:	1d c0       	rjmp	.+58     	; 0x11e8 <ActionSwitch+0x64>
	{
		case SCREEN_RESET:
			current_screen = SCREEN_HOME;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	80 93 db 01 	sts	0x01DB, r24
		break;
    11b4:	22 c0       	rjmp	.+68     	; 0x11fa <ActionSwitch+0x76>
		case SCREEN_HOME:
			DisplayWriteCurrDate();	
    11b6:	0e 94 19 08 	call	0x1032	; 0x1032 <DisplayWriteCurrDate>
			if(action == ACT_BUTTON1)	
    11ba:	1d 30       	cpi	r17, 0x0D	; 13
    11bc:	39 f4       	brne	.+14     	; 0x11cc <ActionSwitch+0x48>
			{
				current_screen = SCREEN_SET_TIME;
    11be:	82 e0       	ldi	r24, 0x02	; 2
    11c0:	80 93 db 01 	sts	0x01DB, r24
				menu_setTime(action);
    11c4:	8d e0       	ldi	r24, 0x0D	; 13
    11c6:	0e 94 23 06 	call	0xc46	; 0xc46 <menu_setTime>
    11ca:	17 c0       	rjmp	.+46     	; 0x11fa <ActionSwitch+0x76>
			}				
			else if(action == ACT_BUTTON2)	
    11cc:	1e 30       	cpi	r17, 0x0E	; 14
    11ce:	a9 f4       	brne	.+42     	; 0x11fa <ActionSwitch+0x76>
			{
				menu_setAlarm(action);
    11d0:	8e e0       	ldi	r24, 0x0E	; 14
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 a9 01 	call	0x352	; 0x352 <menu_setAlarm>
				current_screen = SCREEN_SET_ALARM;
    11d8:	83 e0       	ldi	r24, 0x03	; 3
    11da:	80 93 db 01 	sts	0x01DB, r24
    11de:	0d c0       	rjmp	.+26     	; 0x11fa <ActionSwitch+0x76>
				//menu_configAlarm(action);
				//current_screen = SCREEN_CONFIG_ALARM;
			}				
		break;
		case SCREEN_SET_TIME:
			menu_setTime(action);
    11e0:	81 2f       	mov	r24, r17
    11e2:	0e 94 23 06 	call	0xc46	; 0xc46 <menu_setTime>
		break;
    11e6:	09 c0       	rjmp	.+18     	; 0x11fa <ActionSwitch+0x76>
		case SCREEN_SET_ALARM:
			menu_setAlarm(action);
    11e8:	81 2f       	mov	r24, r17
    11ea:	90 e0       	ldi	r25, 0x00	; 0
    11ec:	0e 94 a9 01 	call	0x352	; 0x352 <menu_setAlarm>
		break;
    11f0:	04 c0       	rjmp	.+8      	; 0x11fa <ActionSwitch+0x76>
		default:
			sende("default");
    11f2:	86 ea       	ldi	r24, 0xA6	; 166
    11f4:	91 e0       	ldi	r25, 0x01	; 1
    11f6:	0e 94 7f 02 	call	0x4fe	; 0x4fe <sende>
// 		break;
// 	}
// 	
// 	if(menu_status < 3 ) setDisplayMain(0);
	return TRUE;
}
    11fa:	1f 91       	pop	r17
    11fc:	08 95       	ret

000011fe <main>:
uint8_t alarms[1][5];
char isAlarm = 0;

int main(void)
{	
	init();
    11fe:	0e 94 c7 04 	call	0x98e	; 0x98e <init>
	
	#if DEGBUG
		sende(NL NL NL "*** RedLabs Sunrise Alarm ***");
    1202:	8e ea       	ldi	r24, 0xAE	; 174
    1204:	91 e0       	ldi	r25, 0x01	; 1
    1206:	0e 94 7f 02 	call	0x4fe	; 0x4fe <sende>
	#endif
	
	RTC_start(TRUE);	
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	0e 94 3f 04 	call	0x87e	; 0x87e <RTC_start>
 	RTC_enableBat(TRUE);	
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	0e 94 51 04 	call	0x8a2	; 0x8a2 <RTC_enableBat>
	 
	RTC_start_min_interrupt();
    1216:	0e 94 94 07 	call	0xf28	; 0xf28 <RTC_start_min_interrupt>
	DisplayWriteCurrDate();
    121a:	0e 94 19 08 	call	0x1032	; 0x1032 <DisplayWriteCurrDate>
	
	LCD_BL_ON
    121e:	5c 9a       	sbi	0x0b, 4	; 11
	
 	sei();
    1220:	78 94       	sei
	 
    while(1)
    {
		if(!userAction)
    1222:	80 91 d2 01 	lds	r24, 0x01D2
    1226:	88 23       	and	r24, r24
    1228:	11 f4       	brne	.+4      	; 0x122e <main+0x30>
		{
			LCD_BL_OFF
    122a:	5c 98       	cbi	0x0b, 4	; 11
    122c:	04 c0       	rjmp	.+8      	; 0x1236 <main+0x38>
		}
		else
		{
			userAction--;
    122e:	81 50       	subi	r24, 0x01	; 1
    1230:	80 93 d2 01 	sts	0x01D2, r24
			LCD_BL_ON
    1234:	5c 9a       	sbi	0x0b, 4	; 11
		}
       	   
		
       if(new_action != 0)
    1236:	80 91 dc 01 	lds	r24, 0x01DC
    123a:	88 23       	and	r24, r24
    123c:	99 f0       	breq	.+38     	; 0x1264 <main+0x66>
	   {
		if(new_action == ACT_BUTTON3)
    123e:	8f 30       	cpi	r24, 0x0F	; 15
    1240:	51 f4       	brne	.+20     	; 0x1256 <main+0x58>
		{
			LED_ON;
    1242:	2e 9a       	sbi	0x05, 6	; 5
    1244:	8f ef       	ldi	r24, 0xFF	; 255
    1246:	93 e2       	ldi	r25, 0x23	; 35
    1248:	a4 ef       	ldi	r26, 0xF4	; 244
    124a:	81 50       	subi	r24, 0x01	; 1
    124c:	90 40       	sbci	r25, 0x00	; 0
    124e:	a0 40       	sbci	r26, 0x00	; 0
    1250:	e1 f7       	brne	.-8      	; 0x124a <main+0x4c>
    1252:	00 c0       	rjmp	.+0      	; 0x1254 <main+0x56>
    1254:	00 00       	nop
			_delay_ms(10000);
		}	
		   
		ActionSwitch(new_action);
    1256:	80 91 dc 01 	lds	r24, 0x01DC
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 94 c2 08 	call	0x1184	; 0x1184 <ActionSwitch>
		new_action = 0;
    1260:	10 92 dc 01 	sts	0x01DC, r1
		
				
	   }
	   
	   if(isAlarm)
    1264:	80 91 dd 01 	lds	r24, 0x01DD
    1268:	88 23       	and	r24, r24
    126a:	11 f0       	breq	.+4      	; 0x1270 <main+0x72>
	   {
		  //fade up LED
		  
		  //test: switch on ligh
		  LED_ON;
    126c:	2e 9a       	sbi	0x05, 6	; 5
    126e:	01 c0       	rjmp	.+2      	; 0x1272 <main+0x74>
		   
		   
	   }
	   else
	   {
		   LED_OFF;			
    1270:	2e 98       	cbi	0x05, 6	; 5
    1272:	8f ef       	ldi	r24, 0xFF	; 255
    1274:	92 e5       	ldi	r25, 0x52	; 82
    1276:	a7 e0       	ldi	r26, 0x07	; 7
    1278:	81 50       	subi	r24, 0x01	; 1
    127a:	90 40       	sbci	r25, 0x00	; 0
    127c:	a0 40       	sbci	r26, 0x00	; 0
    127e:	e1 f7       	brne	.-8      	; 0x1278 <main+0x7a>
    1280:	00 c0       	rjmp	.+0      	; 0x1282 <main+0x84>
    1282:	00 00       	nop
    1284:	ce cf       	rjmp	.-100    	; 0x1222 <main+0x24>

00001286 <itoa>:
    1286:	fb 01       	movw	r30, r22
    1288:	9f 01       	movw	r18, r30
    128a:	e8 94       	clt
    128c:	42 30       	cpi	r20, 0x02	; 2
    128e:	c4 f0       	brlt	.+48     	; 0x12c0 <itoa+0x3a>
    1290:	45 32       	cpi	r20, 0x25	; 37
    1292:	b4 f4       	brge	.+44     	; 0x12c0 <itoa+0x3a>
    1294:	4a 30       	cpi	r20, 0x0A	; 10
    1296:	29 f4       	brne	.+10     	; 0x12a2 <itoa+0x1c>
    1298:	97 fb       	bst	r25, 7
    129a:	1e f4       	brtc	.+6      	; 0x12a2 <itoa+0x1c>
    129c:	90 95       	com	r25
    129e:	81 95       	neg	r24
    12a0:	9f 4f       	sbci	r25, 0xFF	; 255
    12a2:	64 2f       	mov	r22, r20
    12a4:	77 27       	eor	r23, r23
    12a6:	0e 94 74 09 	call	0x12e8	; 0x12e8 <__udivmodhi4>
    12aa:	80 5d       	subi	r24, 0xD0	; 208
    12ac:	8a 33       	cpi	r24, 0x3A	; 58
    12ae:	0c f0       	brlt	.+2      	; 0x12b2 <itoa+0x2c>
    12b0:	89 5d       	subi	r24, 0xD9	; 217
    12b2:	81 93       	st	Z+, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	a1 f7       	brne	.-24     	; 0x12a2 <itoa+0x1c>
    12ba:	16 f4       	brtc	.+4      	; 0x12c0 <itoa+0x3a>
    12bc:	5d e2       	ldi	r21, 0x2D	; 45
    12be:	51 93       	st	Z+, r21
    12c0:	10 82       	st	Z, r1
    12c2:	c9 01       	movw	r24, r18
    12c4:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <strrev>

000012c8 <strrev>:
    12c8:	dc 01       	movw	r26, r24
    12ca:	fc 01       	movw	r30, r24
    12cc:	67 2f       	mov	r22, r23
    12ce:	71 91       	ld	r23, Z+
    12d0:	77 23       	and	r23, r23
    12d2:	e1 f7       	brne	.-8      	; 0x12cc <strrev+0x4>
    12d4:	32 97       	sbiw	r30, 0x02	; 2
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <strrev+0x18>
    12d8:	7c 91       	ld	r23, X
    12da:	6d 93       	st	X+, r22
    12dc:	70 83       	st	Z, r23
    12de:	62 91       	ld	r22, -Z
    12e0:	ae 17       	cp	r26, r30
    12e2:	bf 07       	cpc	r27, r31
    12e4:	c8 f3       	brcs	.-14     	; 0x12d8 <strrev+0x10>
    12e6:	08 95       	ret

000012e8 <__udivmodhi4>:
    12e8:	aa 1b       	sub	r26, r26
    12ea:	bb 1b       	sub	r27, r27
    12ec:	51 e1       	ldi	r21, 0x11	; 17
    12ee:	07 c0       	rjmp	.+14     	; 0x12fe <__udivmodhi4_ep>

000012f0 <__udivmodhi4_loop>:
    12f0:	aa 1f       	adc	r26, r26
    12f2:	bb 1f       	adc	r27, r27
    12f4:	a6 17       	cp	r26, r22
    12f6:	b7 07       	cpc	r27, r23
    12f8:	10 f0       	brcs	.+4      	; 0x12fe <__udivmodhi4_ep>
    12fa:	a6 1b       	sub	r26, r22
    12fc:	b7 0b       	sbc	r27, r23

000012fe <__udivmodhi4_ep>:
    12fe:	88 1f       	adc	r24, r24
    1300:	99 1f       	adc	r25, r25
    1302:	5a 95       	dec	r21
    1304:	a9 f7       	brne	.-22     	; 0x12f0 <__udivmodhi4_loop>
    1306:	80 95       	com	r24
    1308:	90 95       	com	r25
    130a:	bc 01       	movw	r22, r24
    130c:	cd 01       	movw	r24, r26
    130e:	08 95       	ret

00001310 <_exit>:
    1310:	f8 94       	cli

00001312 <__stop_program>:
    1312:	ff cf       	rjmp	.-2      	; 0x1312 <__stop_program>
